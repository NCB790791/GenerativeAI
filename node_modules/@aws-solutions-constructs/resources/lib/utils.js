"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.addCfnSuppressRulesForCustomResourceProvider = void 0;
const core_1 = require("@aws-solutions-constructs/core");
const addCfnSuppressRulesForCustomResourceProvider = (provider) => {
    const providerFrameworkFunction = provider.node.children[0].node.findChild('Resource');
    (0, core_1.addCfnSuppressRules)(providerFrameworkFunction, [
        {
            id: 'W58',
            reason: `The CDK-provided lambda function that backs their Custom Resource Provider framework has an IAM role with the arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole Managed Policy attached, which grants permission to write to CloudWatch Logs`
        },
        {
            id: 'W89',
            reason: `The CDK-provided lambda function that backs their Custom Resource Provider framework does not access VPC resources`
        },
        {
            id: 'W92',
            reason: `The CDK-provided lambda function that backs their Custom Resource Provider framework does not define ReservedConcurrentExecutions`
        }
    ]);
};
exports.addCfnSuppressRulesForCustomResourceProvider = addCfnSuppressRulesForCustomResourceProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7O0dBV0c7OztBQUlILHlEQUFxRTtBQUU5RCxNQUFNLDRDQUE0QyxHQUFHLENBQUMsUUFBa0IsRUFBRSxFQUFFO0lBQ2pGLE1BQU0seUJBQXlCLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQXVCLENBQUM7SUFDN0csSUFBQSwwQkFBbUIsRUFBQyx5QkFBeUIsRUFBRTtRQUM3QztZQUNFLEVBQUUsRUFBRSxLQUFLO1lBQ1QsTUFBTSxFQUFFLDZQQUE2UDtTQUN0UTtRQUNEO1lBQ0UsRUFBRSxFQUFFLEtBQUs7WUFDVCxNQUFNLEVBQUUsb0hBQW9IO1NBQzdIO1FBQ0Q7WUFDRSxFQUFFLEVBQUUsS0FBSztZQUNULE1BQU0sRUFBRSxtSUFBbUk7U0FDNUk7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFoQlcsUUFBQSw0Q0FBNEMsZ0RBZ0J2RCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLiBZb3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiAgd2l0aCB0aGUgTGljZW5zZS4gQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBvciBpbiB0aGUgJ2xpY2Vuc2UnIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICdBUyBJUycgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFU1xuICogIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXG4gKiAgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCAqIGFzIGxhbWJkYSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbGFtYmRhJztcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSBcImF3cy1jZGstbGliL2N1c3RvbS1yZXNvdXJjZXNcIjtcbmltcG9ydCB7IGFkZENmblN1cHByZXNzUnVsZXMgfSBmcm9tIFwiQGF3cy1zb2x1dGlvbnMtY29uc3RydWN0cy9jb3JlXCI7XG5cbmV4cG9ydCBjb25zdCBhZGRDZm5TdXBwcmVzc1J1bGVzRm9yQ3VzdG9tUmVzb3VyY2VQcm92aWRlciA9IChwcm92aWRlcjogUHJvdmlkZXIpID0+IHtcbiAgY29uc3QgcHJvdmlkZXJGcmFtZXdvcmtGdW5jdGlvbiA9IHByb3ZpZGVyLm5vZGUuY2hpbGRyZW5bMF0ubm9kZS5maW5kQ2hpbGQoJ1Jlc291cmNlJykgYXMgbGFtYmRhLkNmbkZ1bmN0aW9uO1xuICBhZGRDZm5TdXBwcmVzc1J1bGVzKHByb3ZpZGVyRnJhbWV3b3JrRnVuY3Rpb24sIFtcbiAgICB7XG4gICAgICBpZDogJ1c1OCcsXG4gICAgICByZWFzb246IGBUaGUgQ0RLLXByb3ZpZGVkIGxhbWJkYSBmdW5jdGlvbiB0aGF0IGJhY2tzIHRoZWlyIEN1c3RvbSBSZXNvdXJjZSBQcm92aWRlciBmcmFtZXdvcmsgaGFzIGFuIElBTSByb2xlIHdpdGggdGhlIGFybjphd3M6aWFtOjphd3M6cG9saWN5L3NlcnZpY2Utcm9sZS9BV1NMYW1iZGFCYXNpY0V4ZWN1dGlvblJvbGUgTWFuYWdlZCBQb2xpY3kgYXR0YWNoZWQsIHdoaWNoIGdyYW50cyBwZXJtaXNzaW9uIHRvIHdyaXRlIHRvIENsb3VkV2F0Y2ggTG9nc2BcbiAgICB9LFxuICAgIHtcbiAgICAgIGlkOiAnVzg5JyxcbiAgICAgIHJlYXNvbjogYFRoZSBDREstcHJvdmlkZWQgbGFtYmRhIGZ1bmN0aW9uIHRoYXQgYmFja3MgdGhlaXIgQ3VzdG9tIFJlc291cmNlIFByb3ZpZGVyIGZyYW1ld29yayBkb2VzIG5vdCBhY2Nlc3MgVlBDIHJlc291cmNlc2BcbiAgICB9LFxuICAgIHtcbiAgICAgIGlkOiAnVzkyJyxcbiAgICAgIHJlYXNvbjogYFRoZSBDREstcHJvdmlkZWQgbGFtYmRhIGZ1bmN0aW9uIHRoYXQgYmFja3MgdGhlaXIgQ3VzdG9tIFJlc291cmNlIFByb3ZpZGVyIGZyYW1ld29yayBkb2VzIG5vdCBkZWZpbmUgUmVzZXJ2ZWRDb25jdXJyZW50RXhlY3V0aW9uc2BcbiAgICB9XG4gIF0pO1xufTtcbiJdfQ==