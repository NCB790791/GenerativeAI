"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createKeyPolicyUpdaterCustomResource = createKeyPolicyUpdaterCustomResource;
const iam = require("aws-cdk-lib/aws-iam");
const lambda = require("aws-cdk-lib/aws-lambda");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const custom_resources_1 = require("aws-cdk-lib/custom-resources");
const core_1 = require("@aws-solutions-constructs/core");
const utils_1 = require("./utils");
const defaults = require("@aws-solutions-constructs/core");
function createKeyPolicyUpdaterCustomResource(scope, id, props) {
    const lambdaFunction = (0, core_1.buildLambdaFunction)(scope, {
        lambdaFunctionProps: {
            runtime: defaults.COMMERCIAL_REGION_LAMBDA_NODE_RUNTIME,
            handler: 'index.handler',
            description: 'Custom resource function that updates a provided key policy to allow CloudFront access.',
            timeout: props.timeout,
            memorySize: props.memorySize,
            code: lambda.Code.fromAsset(`${__dirname}/key-policy-updater-custom-resource`)
        }
    });
    const customResourceCmkPrivilegePolicy = new iam.Policy(scope, `${id}ResourceCmkPolicy`, {
        statements: [
            new iam.PolicyStatement({
                actions: ['kms:PutKeyPolicy', 'kms:GetKeyPolicy', 'kms:DescribeKey'],
                effect: iam.Effect.ALLOW,
                resources: [props.encryptionKey.keyArn]
            })
        ]
    });
    lambdaFunction.role?.attachInlinePolicy(customResourceCmkPrivilegePolicy);
    const kmsKeyPolicyUpdateProvider = new custom_resources_1.Provider(scope, 'KmsKeyPolicyUpdateProvider', {
        onEventHandler: lambdaFunction
    });
    (0, utils_1.addCfnSuppressRulesForCustomResourceProvider)(kmsKeyPolicyUpdateProvider);
    const customResource = new aws_cdk_lib_1.CustomResource(scope, 'KmsKeyPolicyUpdater', {
        resourceType: 'Custom::KmsKeyPolicyUpdater',
        serviceToken: kmsKeyPolicyUpdateProvider.serviceToken,
        properties: {
            KmsKeyId: props.encryptionKey.keyId,
            CloudFrontDistributionId: props.distribution.distributionId,
            AccountId: aws_cdk_lib_1.Aws.ACCOUNT_ID
        },
    });
    return {
        lambdaFunction,
        customResource
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5LXBvbGljeS11cGRhdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsia2V5LXBvbGljeS11cGRhdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7R0FXRzs7QUEyQkgsb0ZBaURDO0FBekVELDJDQUEyQztBQUMzQyxpREFBaUQ7QUFDakQsNkNBQWtEO0FBQ2xELG1FQUF3RDtBQUN4RCx5REFBcUU7QUFHckUsbUNBQXVFO0FBR3ZFLDJEQUEyRDtBQWMzRCxTQUFnQixvQ0FBb0MsQ0FDbEQsS0FBZ0IsRUFDaEIsRUFBVSxFQUNWLEtBQTRCO0lBRzVCLE1BQU0sY0FBYyxHQUFHLElBQUEsMEJBQW1CLEVBQUMsS0FBSyxFQUFFO1FBQ2hELG1CQUFtQixFQUFFO1lBQ25CLE9BQU8sRUFBRSxRQUFRLENBQUMscUNBQXFDO1lBQ3ZELE9BQU8sRUFBRSxlQUFlO1lBQ3hCLFdBQVcsRUFBRSx5RkFBeUY7WUFDdEcsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3RCLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUM1QixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxTQUFTLHFDQUFxQyxDQUFDO1NBQy9FO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsTUFBTSxnQ0FBZ0MsR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxtQkFBbUIsRUFBRTtRQUN2RixVQUFVLEVBQUU7WUFDVixJQUFJLEdBQUcsQ0FBQyxlQUFlLENBQUM7Z0JBQ3RCLE9BQU8sRUFBRSxDQUFDLGtCQUFrQixFQUFFLGtCQUFrQixFQUFFLGlCQUFpQixDQUFDO2dCQUNwRSxNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLO2dCQUN4QixTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQzthQUN4QyxDQUFDO1NBQ0g7S0FDRixDQUFDLENBQUM7SUFFSCxjQUFjLENBQUMsSUFBSSxFQUFFLGtCQUFrQixDQUFDLGdDQUFnQyxDQUFDLENBQUM7SUFFMUUsTUFBTSwwQkFBMEIsR0FBRyxJQUFJLDJCQUFRLENBQUMsS0FBSyxFQUFFLDRCQUE0QixFQUFFO1FBQ25GLGNBQWMsRUFBRSxjQUFjO0tBQy9CLENBQUMsQ0FBQztJQUVILElBQUEsb0RBQTRDLEVBQUMsMEJBQTBCLENBQUMsQ0FBQztJQUV6RSxNQUFNLGNBQWMsR0FBRyxJQUFJLDRCQUFjLENBQUMsS0FBSyxFQUFFLHFCQUFxQixFQUFFO1FBQ3RFLFlBQVksRUFBRSw2QkFBNkI7UUFDM0MsWUFBWSxFQUFFLDBCQUEwQixDQUFDLFlBQVk7UUFDckQsVUFBVSxFQUFFO1lBQ1YsUUFBUSxFQUFFLEtBQUssQ0FBQyxhQUFhLENBQUMsS0FBSztZQUNuQyx3QkFBd0IsRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLGNBQWM7WUFDM0QsU0FBUyxFQUFFLGlCQUFHLENBQUMsVUFBVTtTQUMxQjtLQUNGLENBQUMsQ0FBQztJQUVILE9BQU87UUFDTCxjQUFjO1FBQ2QsY0FBYztLQUNmLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiAgQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIikuIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqICB3aXRoIHRoZSBMaWNlbnNlLiBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMgbG9jYXRlZCBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIG9yIGluIHRoZSAnbGljZW5zZScgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTXG4gKiAgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcbiAqICBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0ICogYXMgY2RrIGZyb20gXCJhd3MtY2RrLWxpYlwiO1xuaW1wb3J0ICogYXMgaWFtIGZyb20gJ2F3cy1jZGstbGliL2F3cy1pYW0nO1xuaW1wb3J0ICogYXMgbGFtYmRhIGZyb20gJ2F3cy1jZGstbGliL2F3cy1sYW1iZGEnO1xuaW1wb3J0IHsgQXdzLCBDdXN0b21SZXNvdXJjZSB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSBcImF3cy1jZGstbGliL2N1c3RvbS1yZXNvdXJjZXNcIjtcbmltcG9ydCB7IGJ1aWxkTGFtYmRhRnVuY3Rpb24gfSBmcm9tIFwiQGF3cy1zb2x1dGlvbnMtY29uc3RydWN0cy9jb3JlXCI7XG5pbXBvcnQgeyBJS2V5IH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1rbXNcIjtcbmltcG9ydCB7IERpc3RyaWJ1dGlvbiB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtY2xvdWRmcm9udFwiO1xuaW1wb3J0IHsgYWRkQ2ZuU3VwcHJlc3NSdWxlc0ZvckN1c3RvbVJlc291cmNlUHJvdmlkZXIgfSBmcm9tIFwiLi91dGlsc1wiO1xuLy8gTm90ZTogVG8gZW5zdXJlIENES3YyIGNvbXBhdGliaWxpdHksIGtlZXAgdGhlIGltcG9ydCBzdGF0ZW1lbnQgZm9yIENvbnN0cnVjdCBzZXBhcmF0ZVxuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgKiBhcyBkZWZhdWx0cyBmcm9tICdAYXdzLXNvbHV0aW9ucy1jb25zdHJ1Y3RzL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIENyZWF0ZUtleVBvbGljeVVwZGF0ZXJSZXNwb25zZSB7XG4gIHJlYWRvbmx5IGxhbWJkYUZ1bmN0aW9uOiBsYW1iZGEuRnVuY3Rpb247XG4gIHJlYWRvbmx5IGN1c3RvbVJlc291cmNlOiBDdXN0b21SZXNvdXJjZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBLZXlQb2xpY3lVcGRhdGVyUHJvcHMge1xuICByZWFkb25seSBlbmNyeXB0aW9uS2V5OiBJS2V5O1xuICByZWFkb25seSBkaXN0cmlidXRpb246IERpc3RyaWJ1dGlvbjtcbiAgcmVhZG9ubHkgdGltZW91dD86IGNkay5EdXJhdGlvbjtcbiAgcmVhZG9ubHkgbWVtb3J5U2l6ZT86IG51bWJlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUtleVBvbGljeVVwZGF0ZXJDdXN0b21SZXNvdXJjZShcbiAgc2NvcGU6IENvbnN0cnVjdCxcbiAgaWQ6IHN0cmluZyxcbiAgcHJvcHM6IEtleVBvbGljeVVwZGF0ZXJQcm9wc1xuKTogQ3JlYXRlS2V5UG9saWN5VXBkYXRlclJlc3BvbnNlIHtcblxuICBjb25zdCBsYW1iZGFGdW5jdGlvbiA9IGJ1aWxkTGFtYmRhRnVuY3Rpb24oc2NvcGUsIHtcbiAgICBsYW1iZGFGdW5jdGlvblByb3BzOiB7XG4gICAgICBydW50aW1lOiBkZWZhdWx0cy5DT01NRVJDSUFMX1JFR0lPTl9MQU1CREFfTk9ERV9SVU5USU1FLFxuICAgICAgaGFuZGxlcjogJ2luZGV4LmhhbmRsZXInLFxuICAgICAgZGVzY3JpcHRpb246ICdDdXN0b20gcmVzb3VyY2UgZnVuY3Rpb24gdGhhdCB1cGRhdGVzIGEgcHJvdmlkZWQga2V5IHBvbGljeSB0byBhbGxvdyBDbG91ZEZyb250IGFjY2Vzcy4nLFxuICAgICAgdGltZW91dDogcHJvcHMudGltZW91dCxcbiAgICAgIG1lbW9yeVNpemU6IHByb3BzLm1lbW9yeVNpemUsXG4gICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQoYCR7X19kaXJuYW1lfS9rZXktcG9saWN5LXVwZGF0ZXItY3VzdG9tLXJlc291cmNlYClcbiAgICB9XG4gIH0pO1xuXG4gIGNvbnN0IGN1c3RvbVJlc291cmNlQ21rUHJpdmlsZWdlUG9saWN5ID0gbmV3IGlhbS5Qb2xpY3koc2NvcGUsIGAke2lkfVJlc291cmNlQ21rUG9saWN5YCwge1xuICAgIHN0YXRlbWVudHM6IFtcbiAgICAgIG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KHtcbiAgICAgICAgYWN0aW9uczogWydrbXM6UHV0S2V5UG9saWN5JywgJ2ttczpHZXRLZXlQb2xpY3knLCAna21zOkRlc2NyaWJlS2V5J10sXG4gICAgICAgIGVmZmVjdDogaWFtLkVmZmVjdC5BTExPVyxcbiAgICAgICAgcmVzb3VyY2VzOiBbcHJvcHMuZW5jcnlwdGlvbktleS5rZXlBcm5dXG4gICAgICB9KVxuICAgIF1cbiAgfSk7XG5cbiAgbGFtYmRhRnVuY3Rpb24ucm9sZT8uYXR0YWNoSW5saW5lUG9saWN5KGN1c3RvbVJlc291cmNlQ21rUHJpdmlsZWdlUG9saWN5KTtcblxuICBjb25zdCBrbXNLZXlQb2xpY3lVcGRhdGVQcm92aWRlciA9IG5ldyBQcm92aWRlcihzY29wZSwgJ0ttc0tleVBvbGljeVVwZGF0ZVByb3ZpZGVyJywge1xuICAgIG9uRXZlbnRIYW5kbGVyOiBsYW1iZGFGdW5jdGlvblxuICB9KTtcblxuICBhZGRDZm5TdXBwcmVzc1J1bGVzRm9yQ3VzdG9tUmVzb3VyY2VQcm92aWRlcihrbXNLZXlQb2xpY3lVcGRhdGVQcm92aWRlcik7XG5cbiAgY29uc3QgY3VzdG9tUmVzb3VyY2UgPSBuZXcgQ3VzdG9tUmVzb3VyY2Uoc2NvcGUsICdLbXNLZXlQb2xpY3lVcGRhdGVyJywge1xuICAgIHJlc291cmNlVHlwZTogJ0N1c3RvbTo6S21zS2V5UG9saWN5VXBkYXRlcicsXG4gICAgc2VydmljZVRva2VuOiBrbXNLZXlQb2xpY3lVcGRhdGVQcm92aWRlci5zZXJ2aWNlVG9rZW4sXG4gICAgcHJvcGVydGllczoge1xuICAgICAgS21zS2V5SWQ6IHByb3BzLmVuY3J5cHRpb25LZXkua2V5SWQsXG4gICAgICBDbG91ZEZyb250RGlzdHJpYnV0aW9uSWQ6IHByb3BzLmRpc3RyaWJ1dGlvbi5kaXN0cmlidXRpb25JZCxcbiAgICAgIEFjY291bnRJZDogQXdzLkFDQ09VTlRfSURcbiAgICB9LFxuICB9KTtcblxuICByZXR1cm4ge1xuICAgIGxhbWJkYUZ1bmN0aW9uLFxuICAgIGN1c3RvbVJlc291cmNlXG4gIH07XG59Il19