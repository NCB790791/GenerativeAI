"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTemplateWriterCustomResource = createTemplateWriterCustomResource;
const iam = require("aws-cdk-lib/aws-iam");
const lambda = require("aws-cdk-lib/aws-lambda");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_s3_assets_1 = require("aws-cdk-lib/aws-s3-assets");
const path = require("path");
const custom_resources_1 = require("aws-cdk-lib/custom-resources");
const core_1 = require("@aws-solutions-constructs/core");
const utils_1 = require("./utils");
const defaults = require("@aws-solutions-constructs/core");
function createTemplateWriterCustomResource(scope, id, props) {
    const outputAsset = new aws_s3_assets_1.Asset(scope, `${id}OutputAsset`, {
        path: path.join(__dirname, 'placeholder')
    });
    const templateWriterLambda = (0, core_1.buildLambdaFunction)(scope, {
        lambdaFunctionProps: {
            runtime: defaults.COMMERCIAL_REGION_LAMBDA_NODE_RUNTIME,
            handler: 'index.handler',
            code: lambda.Code.fromAsset(`${__dirname}/template-writer-custom-resource`),
            timeout: props.timeout,
            memorySize: props.memorySize,
        }
    });
    const templateWriterPolicy = new iam.Policy(scope, `${id}TemplateWriterPolicy`, {
        statements: [
            new iam.PolicyStatement({
                actions: ['s3:GetObject'],
                effect: iam.Effect.ALLOW,
                resources: [`arn:${aws_cdk_lib_1.Aws.PARTITION}:s3:::${props.templateBucket.bucketName}/${props.templateKey}`]
            }),
            new iam.PolicyStatement({
                actions: ['s3:PutObject'],
                effect: iam.Effect.ALLOW,
                resources: [`arn:${aws_cdk_lib_1.Aws.PARTITION}:s3:::${outputAsset.s3BucketName}/*`]
            })
        ]
    });
    templateWriterLambda.role?.attachInlinePolicy(templateWriterPolicy);
    const templateWriterProvider = new custom_resources_1.Provider(scope, `${id}TemplateWriterProvider`, {
        onEventHandler: templateWriterLambda
    });
    (0, utils_1.addCfnSuppressRulesForCustomResourceProvider)(templateWriterProvider);
    const customResource = new aws_cdk_lib_1.CustomResource(scope, `${id}TemplateWriterCustomResource`, {
        resourceType: 'Custom::TemplateWriter',
        serviceToken: templateWriterProvider.serviceToken,
        properties: {
            TemplateValues: JSON.stringify({ templateValues: props.templateValues }),
            TemplateInputBucket: props.templateBucket.bucketName,
            TemplateInputKey: props.templateKey,
            TemplateOutputBucket: outputAsset.s3BucketName
        }
    });
    customResource.node.addDependency(templateWriterPolicy);
    return {
        s3Bucket: outputAsset.bucket,
        s3Key: customResource.getAttString('TemplateOutputKey'),
        customResource
    };
}
//# sourceMappingURL=data:application/json;base64,