"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const aws_cdk_lib_1 = require("aws-cdk-lib");
const core_1 = require("@aws-solutions-constructs/core");
const integ_tests_alpha_1 = require("@aws-cdk/integ-tests-alpha");
const s3 = require("aws-cdk-lib/aws-s3");
const kms = require("aws-cdk-lib/aws-kms");
const cft = require("aws-cdk-lib/aws-cloudfront");
const cfto = require("aws-cdk-lib/aws-cloudfront-origins");
const key_policy_updater_1 = require("../lib/key-policy-updater");
const utils_1 = require("../../core/lib/utils");
const app = new aws_cdk_lib_1.App();
const stack = new aws_cdk_lib_1.Stack(app, (0, core_1.generateIntegStackName)(__filename));
stack.templateOptions.description = 'Integration Test for Key Policy Updater Resource';
const key = new kms.Key(stack, 'test key', {
    removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
    enableKeyRotation: true
});
const bucket = new s3.Bucket(stack, 'test bucket', {
    removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
    encryption: s3.BucketEncryption.S3_MANAGED,
});
(0, utils_1.addCfnSuppressRules)(bucket, [{
        id: "W35",
        reason: "Test resource"
    }, {
        id: "41",
        reason: "Test resource"
    }
]);
const distribution = new cft.Distribution(stack, 'test dist', {
    defaultBehavior: {
        origin: new cfto.S3Origin(bucket),
    }
});
(0, utils_1.addCfnSuppressRules)(distribution, [{
        id: "W10",
        reason: "Test resource"
    }, {
        id: "W70",
        reason: "Test resource"
    }
]);
(0, key_policy_updater_1.createKeyPolicyUpdaterCustomResource)(stack, 'Test', {
    encryptionKey: key,
    distribution
});
new integ_tests_alpha_1.IntegTest(stack, 'Integ', {
    testCases: [
        stack
    ]
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcua2V5LXBvbGljeS11cGRhdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW50ZWcua2V5LXBvbGljeS11cGRhdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7R0FXRzs7QUFFSCw2Q0FBd0Q7QUFDeEQseURBQXdFO0FBQ3hFLGtFQUF1RDtBQUN2RCx5Q0FBeUM7QUFDekMsMkNBQTJDO0FBQzNDLGtEQUFrRDtBQUNsRCwyREFBMkQ7QUFDM0Qsa0VBQWlGO0FBQ2pGLGdEQUEyRDtBQUUzRCxNQUFNLEdBQUcsR0FBRyxJQUFJLGlCQUFHLEVBQUUsQ0FBQztBQUN0QixNQUFNLEtBQUssR0FBRyxJQUFJLG1CQUFLLENBQUMsR0FBRyxFQUFFLElBQUEsNkJBQXNCLEVBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztBQUNqRSxLQUFLLENBQUMsZUFBZSxDQUFDLFdBQVcsR0FBRyxrREFBa0QsQ0FBQztBQUV2RixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRTtJQUN6QyxhQUFhLEVBQUUsMkJBQWEsQ0FBQyxPQUFPO0lBQ3BDLGlCQUFpQixFQUFFLElBQUk7Q0FDeEIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxNQUFNLEdBQUcsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxhQUFhLEVBQUU7SUFDakQsYUFBYSxFQUFFLDJCQUFhLENBQUMsT0FBTztJQUNwQyxVQUFVLEVBQUUsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFVBQVU7Q0FDM0MsQ0FBQyxDQUFDO0FBRUgsSUFBQSwyQkFBbUIsRUFBQyxNQUFNLEVBQUUsQ0FBQztRQUMzQixFQUFFLEVBQUUsS0FBSztRQUNULE1BQU0sRUFBRSxlQUFlO0tBQ3hCLEVBQUU7UUFDRCxFQUFFLEVBQUUsSUFBSTtRQUNSLE1BQU0sRUFBRSxlQUFlO0tBQ3hCO0NBQ0EsQ0FBQyxDQUFDO0FBRUgsTUFBTSxZQUFZLEdBQUcsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUU7SUFDNUQsZUFBZSxFQUFFO1FBQ2YsTUFBTSxFQUFFLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7S0FDbEM7Q0FDRixDQUFDLENBQUM7QUFFSCxJQUFBLDJCQUFtQixFQUFDLFlBQVksRUFBRSxDQUFDO1FBQ2pDLEVBQUUsRUFBRSxLQUFLO1FBQ1QsTUFBTSxFQUFFLGVBQWU7S0FDeEIsRUFBRTtRQUNELEVBQUUsRUFBRSxLQUFLO1FBQ1QsTUFBTSxFQUFFLGVBQWU7S0FDeEI7Q0FDQSxDQUFDLENBQUM7QUFFSCxJQUFBLHlEQUFvQyxFQUFDLEtBQUssRUFBRSxNQUFNLEVBQUU7SUFDbEQsYUFBYSxFQUFFLEdBQUc7SUFDbEIsWUFBWTtDQUNiLENBQ0EsQ0FBQztBQUVGLElBQUksNkJBQVMsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFO0lBQzVCLFNBQVMsRUFBRTtRQUNULEtBQUs7S0FDTjtDQUNGLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLiBZb3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiAgd2l0aCB0aGUgTGljZW5zZS4gQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBvciBpbiB0aGUgJ2xpY2Vuc2UnIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICdBUyBJUycgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFU1xuICogIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXG4gKiAgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEFwcCwgUmVtb3ZhbFBvbGljeSwgU3RhY2sgfSBmcm9tIFwiYXdzLWNkay1saWJcIjtcbmltcG9ydCB7IGdlbmVyYXRlSW50ZWdTdGFja05hbWUgfSBmcm9tICdAYXdzLXNvbHV0aW9ucy1jb25zdHJ1Y3RzL2NvcmUnO1xuaW1wb3J0IHsgSW50ZWdUZXN0IH0gZnJvbSAnQGF3cy1jZGsvaW50ZWctdGVzdHMtYWxwaGEnO1xuaW1wb3J0ICogYXMgczMgZnJvbSBcImF3cy1jZGstbGliL2F3cy1zM1wiO1xuaW1wb3J0ICogYXMga21zIGZyb20gXCJhd3MtY2RrLWxpYi9hd3Mta21zXCI7XG5pbXBvcnQgKiBhcyBjZnQgZnJvbSBcImF3cy1jZGstbGliL2F3cy1jbG91ZGZyb250XCI7XG5pbXBvcnQgKiBhcyBjZnRvIGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtY2xvdWRmcm9udC1vcmlnaW5zXCI7XG5pbXBvcnQgeyBjcmVhdGVLZXlQb2xpY3lVcGRhdGVyQ3VzdG9tUmVzb3VyY2UgfSBmcm9tIFwiLi4vbGliL2tleS1wb2xpY3ktdXBkYXRlclwiO1xuaW1wb3J0IHsgYWRkQ2ZuU3VwcHJlc3NSdWxlcyB9IGZyb20gXCIuLi8uLi9jb3JlL2xpYi91dGlsc1wiO1xuXG5jb25zdCBhcHAgPSBuZXcgQXBwKCk7XG5jb25zdCBzdGFjayA9IG5ldyBTdGFjayhhcHAsIGdlbmVyYXRlSW50ZWdTdGFja05hbWUoX19maWxlbmFtZSkpO1xuc3RhY2sudGVtcGxhdGVPcHRpb25zLmRlc2NyaXB0aW9uID0gJ0ludGVncmF0aW9uIFRlc3QgZm9yIEtleSBQb2xpY3kgVXBkYXRlciBSZXNvdXJjZSc7XG5cbmNvbnN0IGtleSA9IG5ldyBrbXMuS2V5KHN0YWNrLCAndGVzdCBrZXknLCB7XG4gIHJlbW92YWxQb2xpY3k6IFJlbW92YWxQb2xpY3kuREVTVFJPWSxcbiAgZW5hYmxlS2V5Um90YXRpb246IHRydWVcbn0pO1xuXG5jb25zdCBidWNrZXQgPSBuZXcgczMuQnVja2V0KHN0YWNrLCAndGVzdCBidWNrZXQnLCB7XG4gIHJlbW92YWxQb2xpY3k6IFJlbW92YWxQb2xpY3kuREVTVFJPWSxcbiAgZW5jcnlwdGlvbjogczMuQnVja2V0RW5jcnlwdGlvbi5TM19NQU5BR0VELFxufSk7XG5cbmFkZENmblN1cHByZXNzUnVsZXMoYnVja2V0LCBbe1xuICBpZDogXCJXMzVcIixcbiAgcmVhc29uOiBcIlRlc3QgcmVzb3VyY2VcIlxufSwge1xuICBpZDogXCI0MVwiLFxuICByZWFzb246IFwiVGVzdCByZXNvdXJjZVwiXG59XG5dKTtcblxuY29uc3QgZGlzdHJpYnV0aW9uID0gbmV3IGNmdC5EaXN0cmlidXRpb24oc3RhY2ssICd0ZXN0IGRpc3QnLCB7XG4gIGRlZmF1bHRCZWhhdmlvcjoge1xuICAgIG9yaWdpbjogbmV3IGNmdG8uUzNPcmlnaW4oYnVja2V0KSxcbiAgfVxufSk7XG5cbmFkZENmblN1cHByZXNzUnVsZXMoZGlzdHJpYnV0aW9uLCBbe1xuICBpZDogXCJXMTBcIixcbiAgcmVhc29uOiBcIlRlc3QgcmVzb3VyY2VcIlxufSwge1xuICBpZDogXCJXNzBcIixcbiAgcmVhc29uOiBcIlRlc3QgcmVzb3VyY2VcIlxufVxuXSk7XG5cbmNyZWF0ZUtleVBvbGljeVVwZGF0ZXJDdXN0b21SZXNvdXJjZShzdGFjaywgJ1Rlc3QnLCB7XG4gIGVuY3J5cHRpb25LZXk6IGtleSxcbiAgZGlzdHJpYnV0aW9uXG59XG4pO1xuXG5uZXcgSW50ZWdUZXN0KHN0YWNrLCAnSW50ZWcnLCB7XG4gIHRlc3RDYXNlczogW1xuICAgIHN0YWNrXG4gIF1cbn0pO1xuIl19