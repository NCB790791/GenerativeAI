"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildDynamoDBTable = buildDynamoDBTable;
exports.buildDynamoDBTableWithStream = buildDynamoDBTableWithStream;
exports.getPartitionKeyNameFromTable = getPartitionKeyNameFromTable;
exports.CheckDynamoDBProps = CheckDynamoDBProps;
/*
 *  The functions found here in the core library are for internal use and can be changed
 *  or removed outside of a major release. We recommend against calling them directly from client code.
 */
const dynamodb = require("aws-cdk-lib/aws-dynamodb");
const dynamodb_table_defaults_1 = require("./dynamodb-table-defaults");
const utils_1 = require("./utils");
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function buildDynamoDBTable(scope, props) {
    // Conditional DynamoDB Table creation
    if (props.existingTableObj) {
        return { tableInterface: props.existingTableObj, tableObject: props.existingTableObj };
    }
    else if (props.existingTableInterface) {
        return { tableInterface: props.existingTableInterface };
    }
    else {
        const consolidatedTableProps = (0, utils_1.consolidateProps)(dynamodb_table_defaults_1.DefaultTableProps, props.dynamoTableProps);
        const newTable = new dynamodb.Table(scope, 'DynamoTable', consolidatedTableProps);
        // AWS Managed encryption keys is acceptable under published best practices
        // https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/best-practices-security-preventative.html
        (0, utils_1.addCfnGuardSuppressRules)(newTable, ["DYNAMODB_TABLE_ENCRYPTED_KMS"]);
        return { tableInterface: newTable, tableObject: newTable };
    }
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function buildDynamoDBTableWithStream(scope, props) {
    // Conditional DynamoDB Table creation
    if (!props.existingTableInterface) {
        // Set the default props for DynamoDB table
        const dynamoTableProps = (0, utils_1.consolidateProps)(dynamodb_table_defaults_1.DefaultTableWithStreamProps, props.dynamoTableProps);
        const dynamoTable = new dynamodb.Table(scope, 'DynamoTable', dynamoTableProps);
        // AWS Managed encryption keys is acceptable under published best practices
        // https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/best-practices-security-preventative.html
        (0, utils_1.addCfnGuardSuppressRules)(dynamoTable, ["DYNAMODB_TABLE_ENCRYPTED_KMS"]);
        return { tableInterface: dynamoTable, tableObject: dynamoTable };
    }
    else {
        return { tableInterface: props.existingTableInterface };
    }
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function getPartitionKeyNameFromTable(table) {
    const cfnTable = table.node.findChild('Resource');
    const keySchema = cfnTable.keySchema;
    const partitionKey = keySchema.find((keyPart) => keyPart.keyType === 'HASH');
    if (!partitionKey) {
        throw new Error('Partition key for table not defined');
    }
    return partitionKey.attributeName;
}
function CheckDynamoDBProps(propsObject) {
    let errorMessages = '';
    let errorFound = false;
    if (propsObject.dynamoTableProps && propsObject.existingTableObj) {
        errorMessages += 'Error - Either provide existingTableObj or dynamoTableProps, but not both.\n';
        errorFound = true;
    }
    if (propsObject.dynamoTableProps && propsObject.existingTableInterface) {
        errorMessages += 'Error - Either provide existingTableInterface or dynamoTableProps, but not both.\n';
        errorFound = true;
    }
    if (propsObject.existingTableObj && propsObject.existingTableInterface) {
        errorMessages += 'Error - Either provide existingTableInterface or existingTableObj, but not both.\n';
        errorFound = true;
    }
    if (errorFound) {
        throw new Error(errorMessages);
    }
}
//# sourceMappingURL=data:application/json;base64,