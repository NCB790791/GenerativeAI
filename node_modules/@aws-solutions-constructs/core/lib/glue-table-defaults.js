"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultGlueTableProps = DefaultGlueTableProps;
const aws_cdk_lib_1 = require("aws-cdk-lib");
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function DefaultGlueTableProps(database, fieldSchema, sourceType, parameters) {
    let _tableProps;
    if (sourceType === 'kinesis') {
        const kinesisStreamName = parameters.STREAM_NAME;
        const _paths = fieldSchema.map((item) => {
            return item.name;
        }).join(',');
        _tableProps = {
            catalogId: database.catalogId,
            databaseName: database.ref,
            tableInput: {
                storageDescriptor: {
                    columns: fieldSchema,
                    location: kinesisStreamName,
                    inputFormat: "org.apache.hadoop.mapred.TextInputFormat",
                    outputFormat: "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
                    compressed: false,
                    numberOfBuckets: -1,
                    serdeInfo: {
                        serializationLibrary: "org.openx.data.jsonserde.JsonSerDe",
                        parameters: {
                            paths: _paths
                        }
                    },
                    parameters: {
                        endpointUrl: `https://kinesis.${aws_cdk_lib_1.Aws.REGION}.amazonaws.com`,
                        streamName: kinesisStreamName,
                        typeOfData: sourceType
                    }
                },
                tableType: 'EXTERNAL_TABLE',
                parameters: {
                    classification: 'json'
                }
            }
        };
        return _tableProps;
    }
    else {
        throw Error('Source Type not Supported. Valid Source Type not provided');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2x1ZS10YWJsZS1kZWZhdWx0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdsdWUtdGFibGUtZGVmYXVsdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7OztHQVdHOztBQWFILHNEQTZDQztBQWxERCw2Q0FBa0M7QUFFbEM7O0dBRUc7QUFDSCxTQUFnQixxQkFBcUIsQ0FBQyxRQUEwQixFQUFFLFdBQTJDLEVBQzNHLFVBQW1CLEVBQUUsVUFBZ0I7SUFDckMsSUFBSSxXQUErQixDQUFDO0lBRXBDLElBQUksVUFBVSxLQUFLLFNBQVMsRUFBRSxDQUFDO1FBQzdCLE1BQU0saUJBQWlCLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQztRQUVqRCxNQUFNLE1BQU0sR0FBVyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDOUMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUViLFdBQVcsR0FBRztZQUNaLFNBQVMsRUFBRSxRQUFRLENBQUMsU0FBUztZQUM3QixZQUFZLEVBQUUsUUFBUSxDQUFDLEdBQUc7WUFDMUIsVUFBVSxFQUFFO2dCQUNWLGlCQUFpQixFQUFFO29CQUNqQixPQUFPLEVBQUUsV0FBVztvQkFDcEIsUUFBUSxFQUFFLGlCQUFpQjtvQkFDM0IsV0FBVyxFQUFFLDBDQUEwQztvQkFDdkQsWUFBWSxFQUFFLDREQUE0RDtvQkFDMUUsVUFBVSxFQUFFLEtBQUs7b0JBQ2pCLGVBQWUsRUFBRSxDQUFDLENBQUM7b0JBQ25CLFNBQVMsRUFBRTt3QkFDVCxvQkFBb0IsRUFBRSxvQ0FBb0M7d0JBQzFELFVBQVUsRUFBRTs0QkFDVixLQUFLLEVBQUUsTUFBTTt5QkFDZDtxQkFDRjtvQkFDRCxVQUFVLEVBQUU7d0JBQ1YsV0FBVyxFQUFFLG1CQUFtQixpQkFBRyxDQUFDLE1BQU0sZ0JBQWdCO3dCQUMxRCxVQUFVLEVBQUUsaUJBQWlCO3dCQUM3QixVQUFVLEVBQUUsVUFBVTtxQkFDdkI7aUJBQ0Y7Z0JBQ0QsU0FBUyxFQUFFLGdCQUFnQjtnQkFDM0IsVUFBVSxFQUFFO29CQUNWLGNBQWMsRUFBRSxNQUFNO2lCQUN2QjthQUNGO1NBQ0YsQ0FBQztRQUVGLE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7U0FBTSxDQUFDO1FBQ04sTUFBTSxLQUFLLENBQUMsMkRBQTJELENBQUMsQ0FBQztJQUMzRSxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLiBZb3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiAgd2l0aCB0aGUgTGljZW5zZS4gQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBvciBpbiB0aGUgJ2xpY2Vuc2UnIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICdBUyBJUycgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFU1xuICogIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXG4gKiAgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qXG4gKiAgVGhlIGZ1bmN0aW9ucyBmb3VuZCBoZXJlIGluIHRoZSBjb3JlIGxpYnJhcnkgYXJlIGZvciBpbnRlcm5hbCB1c2UgYW5kIGNhbiBiZSBjaGFuZ2VkXG4gKiAgb3IgcmVtb3ZlZCBvdXRzaWRlIG9mIGEgbWFqb3IgcmVsZWFzZS4gV2UgcmVjb21tZW5kIGFnYWluc3QgY2FsbGluZyB0aGVtIGRpcmVjdGx5IGZyb20gY2xpZW50IGNvZGUuXG4gKi9cblxuaW1wb3J0ICogYXMgZ2x1ZSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWdsdWVcIjtcbmltcG9ydCB7IEF3cyB9IGZyb20gXCJhd3MtY2RrLWxpYlwiO1xuXG4vKipcbiAqIEBpbnRlcm5hbCBUaGlzIGlzIGFuIGludGVybmFsIGNvcmUgZnVuY3Rpb24gYW5kIHNob3VsZCBub3QgYmUgY2FsbGVkIGRpcmVjdGx5IGJ5IFNvbHV0aW9ucyBDb25zdHJ1Y3RzIGNsaWVudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBEZWZhdWx0R2x1ZVRhYmxlUHJvcHMoZGF0YWJhc2U6IGdsdWUuQ2ZuRGF0YWJhc2UsIGZpZWxkU2NoZW1hOiBnbHVlLkNmblRhYmxlLkNvbHVtblByb3BlcnR5W10sXG4gIHNvdXJjZVR5cGU/OiBzdHJpbmcsIHBhcmFtZXRlcnM/OiBhbnkpOiBnbHVlLkNmblRhYmxlUHJvcHMgfCBhbnkge1xuICBsZXQgX3RhYmxlUHJvcHM6IGdsdWUuQ2ZuVGFibGVQcm9wcztcblxuICBpZiAoc291cmNlVHlwZSA9PT0gJ2tpbmVzaXMnKSB7XG4gICAgY29uc3Qga2luZXNpc1N0cmVhbU5hbWUgPSBwYXJhbWV0ZXJzLlNUUkVBTV9OQU1FO1xuXG4gICAgY29uc3QgX3BhdGhzOiBzdHJpbmcgPSBmaWVsZFNjaGVtYS5tYXAoKGl0ZW0pID0+IHtcbiAgICAgIHJldHVybiBpdGVtLm5hbWU7XG4gICAgfSkuam9pbignLCcpO1xuXG4gICAgX3RhYmxlUHJvcHMgPSB7XG4gICAgICBjYXRhbG9nSWQ6IGRhdGFiYXNlLmNhdGFsb2dJZCxcbiAgICAgIGRhdGFiYXNlTmFtZTogZGF0YWJhc2UucmVmLFxuICAgICAgdGFibGVJbnB1dDoge1xuICAgICAgICBzdG9yYWdlRGVzY3JpcHRvcjoge1xuICAgICAgICAgIGNvbHVtbnM6IGZpZWxkU2NoZW1hLFxuICAgICAgICAgIGxvY2F0aW9uOiBraW5lc2lzU3RyZWFtTmFtZSxcbiAgICAgICAgICBpbnB1dEZvcm1hdDogXCJvcmcuYXBhY2hlLmhhZG9vcC5tYXByZWQuVGV4dElucHV0Rm9ybWF0XCIsXG4gICAgICAgICAgb3V0cHV0Rm9ybWF0OiBcIm9yZy5hcGFjaGUuaGFkb29wLmhpdmUucWwuaW8uSGl2ZUlnbm9yZUtleVRleHRPdXRwdXRGb3JtYXRcIixcbiAgICAgICAgICBjb21wcmVzc2VkOiBmYWxzZSxcbiAgICAgICAgICBudW1iZXJPZkJ1Y2tldHM6IC0xLFxuICAgICAgICAgIHNlcmRlSW5mbzoge1xuICAgICAgICAgICAgc2VyaWFsaXphdGlvbkxpYnJhcnk6IFwib3JnLm9wZW54LmRhdGEuanNvbnNlcmRlLkpzb25TZXJEZVwiLFxuICAgICAgICAgICAgcGFyYW1ldGVyczoge1xuICAgICAgICAgICAgICBwYXRoczogX3BhdGhzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICAgICAgICBlbmRwb2ludFVybDogYGh0dHBzOi8va2luZXNpcy4ke0F3cy5SRUdJT059LmFtYXpvbmF3cy5jb21gLFxuICAgICAgICAgICAgc3RyZWFtTmFtZToga2luZXNpc1N0cmVhbU5hbWUsXG4gICAgICAgICAgICB0eXBlT2ZEYXRhOiBzb3VyY2VUeXBlXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0YWJsZVR5cGU6ICdFWFRFUk5BTF9UQUJMRScsXG4gICAgICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgICAgICBjbGFzc2lmaWNhdGlvbjogJ2pzb24nXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIF90YWJsZVByb3BzO1xuICB9IGVsc2Uge1xuICAgIHRocm93IEVycm9yKCdTb3VyY2UgVHlwZSBub3QgU3VwcG9ydGVkLiBWYWxpZCBTb3VyY2UgVHlwZSBub3QgcHJvdmlkZWQnKTtcbiAgfVxufSJdfQ==