"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamoEventSourceProps = DynamoEventSourceProps;
exports.S3EventSourceProps = S3EventSourceProps;
exports.KinesisEventSourceProps = KinesisEventSourceProps;
const lambda = require("aws-cdk-lib/aws-lambda");
const utils_1 = require("./utils");
const aws_lambda_event_sources_1 = require("aws-cdk-lib/aws-lambda-event-sources");
const s3 = require("aws-cdk-lib/aws-s3");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const sqs_helper_1 = require("./sqs-helper");
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function DynamoEventSourceProps(scope, _dynamoEventSourceProps) {
    const baseProps = {
        startingPosition: lambda.StartingPosition.TRIM_HORIZON,
        bisectBatchOnError: true,
        maxRecordAge: aws_cdk_lib_1.Duration.hours(24),
        retryAttempts: 500
    };
    let extraProps = {};
    if (_dynamoEventSourceProps === undefined || _dynamoEventSourceProps?.deploySqsDlqQueue === undefined
        || _dynamoEventSourceProps.deploySqsDlqQueue) {
        const buildQueueResponse = (0, sqs_helper_1.buildQueue)(scope, 'SqsDlqQueue', {
            queueProps: _dynamoEventSourceProps?.sqsDlqQueueProps,
            deployDeadLetterQueue: false // This is already a DLQ for the stream, it doesn't need it's own DLQS
        });
        extraProps = {
            onFailure: new aws_lambda_event_sources_1.SqsDlq(buildQueueResponse.queue),
        };
    }
    const defaultDynamoEventSourceProps = Object.assign(baseProps, extraProps);
    return (0, utils_1.consolidateProps)(defaultDynamoEventSourceProps, _dynamoEventSourceProps?.eventSourceProps);
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function S3EventSourceProps(_s3EventSourceProps) {
    const defaultS3EventSourceProps = {
        events: [s3.EventType.OBJECT_CREATED]
    };
    return (0, utils_1.consolidateProps)(defaultS3EventSourceProps, _s3EventSourceProps);
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function KinesisEventSourceProps(scope, _kinesisEventSourceProps) {
    const baseProps = {
        startingPosition: lambda.StartingPosition.TRIM_HORIZON,
        bisectBatchOnError: true,
        maxRecordAge: aws_cdk_lib_1.Duration.hours(24),
        retryAttempts: 500
    };
    let extraProps = {};
    if (_kinesisEventSourceProps === undefined || _kinesisEventSourceProps?.deploySqsDlqQueue === undefined
        || _kinesisEventSourceProps.deploySqsDlqQueue) {
        const buildQueueResponse = (0, sqs_helper_1.buildQueue)(scope, 'SqsDlqQueue', {
            queueProps: _kinesisEventSourceProps?.sqsDlqQueueProps,
            deployDeadLetterQueue: false // Don't create SQS DLQ for Kinesis DLQ
        });
        extraProps = {
            onFailure: new aws_lambda_event_sources_1.SqsDlq(buildQueueResponse.queue),
        };
    }
    const defaultKinesisEventSourceProps = Object.assign(baseProps, extraProps);
    return (0, utils_1.consolidateProps)(defaultKinesisEventSourceProps, _kinesisEventSourceProps?.eventSourceProps);
}
//# sourceMappingURL=data:application/json;base64,