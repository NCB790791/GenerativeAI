"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildWebSocketQueueApi = buildWebSocketQueueApi;
exports.buildWebSocketApiProps = buildWebSocketApiProps;
exports.buildWebSocketQueueRouteOptions = buildWebSocketQueueRouteOptions;
const cdk = require("aws-cdk-lib");
const apigateway = require("aws-cdk-lib/aws-apigateway");
const apigwv2 = require("aws-cdk-lib/aws-apigatewayv2");
const aws_apigatewayv2_integrations_1 = require("aws-cdk-lib/aws-apigatewayv2-integrations");
const iam = require("aws-cdk-lib/aws-iam");
const cloudwatch_log_group_helper_1 = require("./cloudwatch-log-group-helper");
const utils_1 = require("./utils");
const websocket_api_defaults_1 = require("./websocket-api-defaults");
/**
 * Builds an AWS API Gateway WebSocket API integrated with an Amazon SQS queue.
 *
 * @param scope The construct scope where the resources will be created.
 * @param id The unique ID for the resources.
 * @param props The configuration properties for the WebSocket API and SQS queue integration.
 * @returns
 */
function buildWebSocketQueueApi(scope, id, props) {
    // Setup the API Gateway role
    const apiGatewayRole = new iam.Role(scope, "LambdaRestApiCloudWatchRole", {
        assumedBy: new iam.ServicePrincipal("apigateway.amazonaws.com"),
    });
    props.queue.grantSendMessages(apiGatewayRole);
    const finalProps = (0, utils_1.consolidateProps)(buildWebSocketApiProps(apiGatewayRole, props.queue, props.createDefaultRoute, props.defaultRouteRequestTemplate, props.defaultIamAuthorization), props.webSocketApiProps);
    const webSocketApi = buildApiGatewayV2WebSocket(scope, id, {
        webSocketApiProps: finalProps,
        existingWebSocketApi: props.existingWebSocketApi,
    });
    if (props.customRouteName) {
        webSocketApi.addRoute(props.customRouteName, buildWebSocketQueueRouteOptions(apiGatewayRole, props.queue, props.customRouteName, props.defaultRouteRequestTemplate));
    }
    if (props.existingWebSocketApi === undefined &&
        props.defaultIamAuthorization === false &&
        finalProps.connectRouteOptions?.authorizer === undefined) {
        (0, utils_1.printWarning)("This construct will create a WebSocket with NO Authorizer (defaultIamAuthorization is set to false).");
    }
    const webSocketStage = new apigwv2.WebSocketStage(scope, "Stage", {
        stageName: "prod",
        webSocketApi,
        autoDeploy: true,
    });
    (0, utils_1.addCfnGuardSuppressRules)(webSocketStage, ["API_GW_CACHE_ENABLED_AND_ENCRYPTED"]);
    const apiGatewayLogGroup = (0, cloudwatch_log_group_helper_1.buildLogGroup)(scope, "LogGroup", props.logGroupProps);
    apiGatewayLogGroup.grant(apiGatewayRole, "logs:CreateLogGroup", "logs:CreateLogStream", "logs:DescribeLogGroups", "logs:DescribeLogStreams", "logs:PutLogEvents", "logs:GetLogEvents", "logs:FilterLogEvents");
    const cfnStage = webSocketStage.node.defaultChild;
    cfnStage.addPropertyOverride("AccessLogSettings", {
        DestinationArn: apiGatewayLogGroup.logGroupArn,
        Format: apigateway.AccessLogFormat.clf().toString(),
    });
    cfnStage.addPropertyOverride("DefaultRouteSettings", {
        DataTraceEnabled: false,
        DetailedMetricsEnabled: true,
        LoggingLevel: "ERROR",
    });
    (0, utils_1.addCfnSuppressRules)(webSocketStage, [
        {
            id: "AwsSolutions-APIG1",
            reason: "Access logging configuration has been provided as per ApiGateway v2 requirements",
        },
    ]);
    (0, utils_1.addCfnSuppressRules)(apiGatewayRole.node.tryFindChild("DefaultPolicy")?.node.tryFindChild("Resource"), [
        {
            id: "AwsSolutions-IAM5",
            reason: "The APIGateway requires permissions to KMS so that it can write to an encrypted SQS queue",
        },
    ]);
    return {
        webSocketApi,
        webSocketStage,
        apiGatewayRole,
        apiGatewayLogGroup,
    };
}
/**
 * build ApiGateway v2 WebSocket L2 construct. If existing WebSocketApi instance is provided, it returns that instance,
 * if not, it creates a new WebSocketApi using the user provided props.
 *
 * @param scope
 * @param props
 * @returns
 */
function buildApiGatewayV2WebSocket(scope, id, props) {
    if (props.existingWebSocketApi) {
        return props.existingWebSocketApi;
    }
    else {
        return new apigwv2.WebSocketApi(scope, `WebSocketApi${id}`, props.webSocketApiProps);
    }
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function buildWebSocketApiProps(role, sqsQueue, createDefaultRoute, requestTemplate, defaultIamAuthorization) {
    if (createDefaultRoute) {
        if (!role || !sqsQueue) {
            throw new Error("role and sqs must be provided to create a default route");
        }
    }
    // prettier-ignore
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    // Sonar exception reason: - typescript:S6571 - required because we are not passing all values. Using partial may cause @jsii to not work.
    const websocketApiProps = {
        defaultRouteOptions: createDefaultRoute ? buildWebSocketQueueRouteOptions(role, sqsQueue, '$default', requestTemplate) : undefined,
        connectRouteOptions: (defaultIamAuthorization === undefined || defaultIamAuthorization === true) ? websocket_api_defaults_1.connectRouteOptions : undefined
    };
    return websocketApiProps;
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function buildWebSocketQueueRouteOptions(role, sqsQueue, routeName, requestTemplate) {
    return {
        integration: new aws_apigatewayv2_integrations_1.WebSocketAwsIntegration(routeName, {
            integrationMethod: apigwv2.HttpMethod.POST,
            integrationUri: `arn:${cdk.Aws.PARTITION}:apigateway:${cdk.Aws.REGION}:sqs:path/${cdk.Aws.ACCOUNT_ID}/${sqsQueue.queueName}`,
            requestTemplates: requestTemplate ?? {
                [routeName === "$default" ? "$default" : routeName]: websocket_api_defaults_1.DEFAULT_ROUTE_QUEUE_VTL_CONFIG,
            },
            templateSelectionExpression: routeName === "$default" ? "\\$default" : routeName,
            passthroughBehavior: apigwv2.PassthroughBehavior.NEVER,
            credentialsRole: role,
            requestParameters: {
                "integration.request.header.Content-Type": "'application/x-www-form-urlencoded'",
            },
        }),
    };
}
//# sourceMappingURL=data:application/json;base64,