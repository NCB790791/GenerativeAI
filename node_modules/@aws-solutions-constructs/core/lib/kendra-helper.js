"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildKendraIndex = buildKendraIndex;
exports.AddMultipleKendraDataSources = AddMultipleKendraDataSources;
exports.AddKendraDataSource = AddKendraDataSource;
exports.normalizeKendraPermissions = normalizeKendraPermissions;
/*
 *  The functions found here in the core library are for internal use and can be changed
 *  or removed outside of a major release. We recommend against calling them directly from client code.
 */
const kendra = require("aws-cdk-lib/aws-kendra");
const iam = require("aws-cdk-lib/aws-iam");
const utils_1 = require("./utils");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const kendra_defaults_1 = require("./kendra-defaults");
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function buildKendraIndex(scope, id, props) {
    // Conditional lambda function creation
    if (props.existingIndexObj) {
        // The client provided an Index, so we'll do nothing and return it to them
        return props.existingIndexObj;
    }
    else {
        let indexRoleArn = "";
        // If the client provided a role, then don't bother creating a new one that we don't need
        if (!props.kendraIndexProps?.roleArn) {
            indexRoleArn = CreateKendraIndexLoggingRole(scope, id);
        }
        const defaultIndexProperties = (0, kendra_defaults_1.DefaultKendraIndexProps)(id, indexRoleArn);
        const consolidatedIndexProperties = (0, utils_1.consolidateProps)(defaultIndexProperties, props.kendraIndexProps);
        const newIndex = new kendra.CfnIndex(scope, `kendra-index-${id}`, consolidatedIndexProperties);
        (0, utils_1.addCfnSuppressRules)(newIndex, [{
                id: "W80",
                reason: "We consulted the Kendra TFC and they confirmed the default encryption is sufficient for general use cases"
            }]);
        return newIndex;
    }
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function AddMultipleKendraDataSources(scope, id, kendraIndex, clientDataSourceProps) {
    const returnDataSources = [];
    clientDataSourceProps.forEach((props, index) => {
        returnDataSources.push(AddKendraDataSource(scope, `${id}${index}`, kendraIndex, props));
    });
    return returnDataSources;
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function AddKendraDataSource(scope, id, index, clientDataSourceProps) {
    if (clientDataSourceProps.type === 'S3') {
        return CreateS3DataSource(scope, index, id, clientDataSourceProps);
    }
    else {
        if (clientDataSourceProps.indexId) {
            throw new Error('Invalid DataSource prop specified - Construct must set the indexId prop');
        }
        return new kendra.CfnDataSource(scope, `kendra-data-source-${id}`, {
            ...clientDataSourceProps,
            indexId: index.attrId
        });
    }
}
function CreateS3DataSource(scope, targetIndex, id, clientProps) {
    // We go through some hoops here to extract the various inputs, because we need to narrow
    // the type to remove the union with IResolvable
    const dataSourceConfig = clientProps.dataSourceConfiguration;
    if (!dataSourceConfig) {
        throw new Error('Error - an S3 Kendra DataSource requires an DataSourceConfiguration prop');
    }
    const s3DataSourceConfig = dataSourceConfig.s3Configuration;
    if (!s3DataSourceConfig) {
        throw new Error('Error - an S3 Kendra DataSource requires an DataSourceConfiguration.S3Configuration prop');
    }
    // No Bucket name is an error
    if (!s3DataSourceConfig.bucketName) {
        throw new Error('Error - an S3 Kendra DataSource requires the DataSourceConfiguration.S3Configuration.bucketName prop');
    }
    // If there's no role, make a role and put it into defaultProps
    // Put bucket name in default props
    let defaultProps = {
        indexId: targetIndex.ref,
        name: (0, utils_1.generatePhysicalKendraIndexName)('', ['s3-datasource', id]),
        type: 'S3'
    };
    // Return consolidated default and user props
    if (!clientProps.roleArn) {
        const s3CrawlPolicy = new iam.PolicyDocument({
            statements: [
                new iam.PolicyStatement({
                    actions: [
                        "s3:GetObject"
                    ],
                    resources: [
                        `arn:aws:s3:::${s3DataSourceConfig.bucketName}/*`
                    ],
                    effect: iam.Effect.ALLOW
                }),
                new iam.PolicyStatement({
                    actions: [
                        "s3:ListBucket"
                    ],
                    resources: [
                        `arn:aws:s3:::${s3DataSourceConfig.bucketName}`
                    ],
                    effect: iam.Effect.ALLOW
                }),
                new iam.PolicyStatement({
                    effect: iam.Effect.ALLOW,
                    actions: [
                        "kendra:BatchPutDocument",
                        "kendra:BatchDeleteDocument"
                    ],
                    resources: [
                        targetIndex.attrArn
                    ]
                }),
            ]
        });
        const dataSourceRole = new iam.Role(scope, `data-source-role-${id}`, {
            assumedBy: new iam.ServicePrincipal('kendra.amazonaws.com'),
            description: 'Policy for Kendra S3 Data Source',
            inlinePolicies: {
                s3CrawlPolicy,
            },
        });
        defaultProps = (0, utils_1.overrideProps)(defaultProps, { roleArn: dataSourceRole.roleArn });
        (0, utils_1.addCfnGuardSuppressRules)(dataSourceRole, ["IAM_NO_INLINE_POLICY_CHECK"]);
    }
    const consolidatedProps = (0, utils_1.consolidateProps)(defaultProps, clientProps);
    return new kendra.CfnDataSource(scope, `data-source-${id}`, consolidatedProps);
}
function CreateKendraIndexLoggingRole(scope, id) {
    const allowKendraToLogPolicy = new iam.PolicyDocument({
        statements: [
            new iam.PolicyStatement({
                resources: ['*'],
                actions: [
                    "cloudwatch:PutMetricData"
                ],
                effect: iam.Effect.ALLOW,
                conditions: {
                    StringEquals: {
                        "cloudwatch:namespace": "AWS/Kendra"
                    }
                }
            }),
            new iam.PolicyStatement({
                resources: [`arn:aws:logs:${aws_cdk_lib_1.Aws.REGION}:${aws_cdk_lib_1.Aws.ACCOUNT_ID}:log-group:/aws/kendra/*`],
                actions: [
                    "logs:CreateLogGroup"
                ],
                effect: iam.Effect.ALLOW,
            }),
            new iam.PolicyStatement({
                resources: [`arn:${aws_cdk_lib_1.Aws.PARTITION}:logs:${aws_cdk_lib_1.Aws.REGION}:${aws_cdk_lib_1.Aws.ACCOUNT_ID}:log-group:/aws/kendra/*`],
                actions: [
                    "logs:DescribeLogGroups"
                ],
                effect: iam.Effect.ALLOW,
            }),
            new iam.PolicyStatement({
                resources: [`arn:${aws_cdk_lib_1.Aws.PARTITION}:logs:${aws_cdk_lib_1.Aws.REGION}:${aws_cdk_lib_1.Aws.ACCOUNT_ID}:log-group:/aws/kendra/*:log-stream:*`],
                actions: [
                    'logs:CreateLogStream',
                    'logs:PutLogEvents',
                    'logs:DescribeLogStream',
                ],
                effect: iam.Effect.ALLOW,
            }),
        ],
    });
    const indexRole = new iam.Role(scope, `kendra-index-role-${id}`, {
        assumedBy: new iam.ServicePrincipal('kendra.amazonaws.com'),
        description: 'Allow Kendra index to write CloudWatch Logs',
        inlinePolicies: {
            AllowLogging: allowKendraToLogPolicy,
        },
    });
    (0, utils_1.addCfnSuppressRules)(indexRole, [{
            id: "W11",
            reason: "PutMetricData does not allow resource specification, " +
                "scope is narrowed by the namespace condition. " +
                "https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazoncloudwatch.html"
        }]);
    (0, utils_1.addCfnGuardSuppressRules)(indexRole, ["IAM_NO_INLINE_POLICY_CHECK"]);
    return indexRole.roleArn;
}
// @summary Confirm each entry is a correct value, uppercase each entry
function normalizeKendraPermissions(rawPermissions) {
    const validPermissions = ["READ", "SUBMITFEEDBACK", "WRITE"];
    const result = rawPermissions.map((s) => {
        const upperCaseValue = s.toUpperCase();
        if (!validPermissions.includes(upperCaseValue)) {
            throw new Error(`Invalid indexPermission value - valid values are "READ", "SUBMITFEEDBACK" and "WRITE"`);
        }
        return upperCaseValue;
    });
    return result;
}
//# sourceMappingURL=data:application/json;base64,