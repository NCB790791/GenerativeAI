"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.COMMERCIAL_REGION_LAMBDA_NODE_STRING = exports.COMMERCIAL_REGION_LAMBDA_NODE_RUNTIME = void 0;
exports.overrideProps = overrideProps;
exports.printWarning = printWarning;
exports.generateResourceName = generateResourceName;
exports.generatePhysicalLogGroupName = generatePhysicalLogGroupName;
exports.generatePhysicalRestApiName = generatePhysicalRestApiName;
exports.generatePhysicalOacName = generatePhysicalOacName;
exports.generatePhysicalKendraIndexName = generatePhysicalKendraIndexName;
exports.generatePhysicalName = generatePhysicalName;
exports.removeNonAlphanumeric = removeNonAlphanumeric;
exports.addCfnSuppressRules = addCfnSuppressRules;
exports.addCfnGuardSuppressRules = addCfnGuardSuppressRules;
exports.suppressVpcCustomerHandlerRoleWarnings = suppressVpcCustomerHandlerRoleWarnings;
exports.consolidateProps = consolidateProps;
exports.generateName = generateName;
exports.CheckListValues = CheckListValues;
exports.CheckBooleanWithDefault = CheckBooleanWithDefault;
exports.CheckStringWithDefault = CheckStringWithDefault;
/*
 *  The functions found here in the core library are for internal use and can be changed
 *  or removed outside of a major release. We recommend against calling them directly from client code.
 */
const deepmerge = require("deepmerge");
const override_warning_service_1 = require("./override-warning-service");
const log = require("npmlog");
const crypto = require("crypto");
const cdk = require("aws-cdk-lib");
const lambda = require("aws-cdk-lib/aws-lambda");
exports.COMMERCIAL_REGION_LAMBDA_NODE_RUNTIME = lambda.Runtime.NODEJS_20_X;
exports.COMMERCIAL_REGION_LAMBDA_NODE_STRING = "nodejs20.x";
function isObject(val) {
    return val != null && typeof val === 'object'
        && Object.prototype.toString.call(val) === '[object Object]';
}
function isPlainObject(o) {
    if (Array.isArray(o) === true) {
        return true;
    }
    if (isObject(o) === false) {
        return false;
    }
    // If has modified constructor
    const ctor = o.constructor;
    if (typeof ctor !== 'function') {
        return false;
    }
    // If has modified prototype
    const prot = ctor.prototype;
    if (isObject(prot) === false) {
        return false;
    }
    // If constructor does not have an Object-specific method
    if (prot.hasOwnProperty('isPrototypeOf') === false) {
        return false;
    }
    // Most likely a plain Object
    return true;
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function overrideProps(DefaultProps, userProps, concatArray = false, suppressWarnings) {
    // Notify the user via console output if defaults are overridden
    let overrideWarningsEnabled;
    if ((process.env.overrideWarningsEnabled === 'false') || (suppressWarnings === true)) {
        overrideWarningsEnabled = false;
    }
    else {
        overrideWarningsEnabled = true;
    }
    if (overrideWarningsEnabled) {
        (0, override_warning_service_1.flagOverriddenDefaults)(DefaultProps, userProps);
    }
    // Override the sensible defaults with user provided props
    if (concatArray) {
        return deepmerge(DefaultProps, userProps, {
            arrayMerge: (destinationArray, sourceArray) => destinationArray.concat(sourceArray),
            isMergeableObject: isPlainObject
        });
    }
    else {
        return deepmerge(DefaultProps, userProps, {
            arrayMerge: (_destinationArray, sourceArray) => sourceArray, // underscore allows arg to be ignored
            isMergeableObject: isPlainObject
        });
    }
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function printWarning(message) {
    // Style the log output
    log.prefixStyle.bold = true;
    log.prefixStyle.fg = 'red';
    log.enableColor();
    log.warn('AWS_SOLUTIONS_CONSTRUCTS_WARNING: ', message);
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * @summary Creates a resource name in the style of the CDK (string+hash) - this value should be used for logical IDs, but
 * not Physical Names, as it will not be static within a single stack instance lifetime, or it will not be different in
 * different stack instances
 * @param {string[]} parts - the various string components of the name (eg - stackName, solutions construct ID, L2 construct ID)
 * @param {number} maxLength - the longest string that can be returned
 * @returns {string} - a string with concatenated parts (truncated if necessary) + a hash of the full concatenated parts
 *
 * This is based upon this discussion - https://github.com/aws/aws-cdk/issues/1424
 */
function generateResourceName(parts, maxLength, randomize = false) {
    const hashLength = 12;
    const randomizor = randomize ? (new Date()).getTime().toString() : "";
    const maxPartLength = Math.floor((maxLength - hashLength - randomizor.length) / parts.length);
    const sha256 = crypto.createHash("sha256");
    let finalName = '';
    parts.forEach((part) => {
        sha256.update(part);
        finalName += removeNonAlphanumeric(part.slice(0, maxPartLength));
    });
    const hash = sha256.digest("hex").slice(0, hashLength);
    finalName += hash;
    finalName += randomizor;
    return finalName.toLowerCase();
}
function generatePhysicalLogGroupName(prefix, parts) {
    return generatePhysicalName(prefix, parts, 255 - prefix.length);
}
function generatePhysicalRestApiName(prefix, parts) {
    return generatePhysicalName(prefix, parts, 255);
}
function generatePhysicalOacName(prefix, parts) {
    return generatePhysicalName(prefix, parts, 64);
}
function generatePhysicalKendraIndexName(prefix, parts) {
    return generatePhysicalName(prefix, parts, 1000);
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * @summary Creates a physical resource name in the style of the CDK (string+hash) - this value incorporates Stack ID,
 * so it will remain static in multiple updates of a single stack, but will be different in a separate stack instance
 * @param {string[]} parts - the various string components of the name (eg - stackName, solutions construct ID, L2 construct ID)
 * @param {number} maxLength - the longest string that can be returned
 * @returns {string} - a string with concatenated parts (truncated if necessary) + a hash of the full concatenated parts
 *
 */
function generatePhysicalName(prefix, parts, maxLength) {
    // The result will consist of:
    //    -The prefix - unaltered
    //    -The parts concatenated, but reduced in size to meet the maxLength limit for the overall name
    //    -A hyphen delimiter
    //    -The GUID portion of the stack arn
    const stackIdGuidLength = 36;
    const prefixLength = prefix.length;
    const maxPartsLength = maxLength - prefixLength - 1 - stackIdGuidLength; // 1 is the hyphen
    // Extract the Stack ID Guid
    const uniqueStackIdPart = cdk.Fn.select(2, cdk.Fn.split('/', `${cdk.Aws.STACK_ID}`));
    let allParts = '';
    parts.forEach((part) => {
        allParts += part;
    });
    if (allParts.length > maxPartsLength) {
        const subStringLength = maxPartsLength / 2;
        allParts = allParts.substring(0, subStringLength) + allParts.substring(allParts.length - subStringLength);
    }
    const finalName = prefix.toLowerCase() + allParts + '-' + uniqueStackIdPart;
    return finalName;
}
/**
 * Removes all non-alphanumeric characters in a string.
 */
function removeNonAlphanumeric(s) {
    return s.replace(/[^A-Za-z0-9]/g, '');
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * Adds CFN NAG suppress rules to the CDK resource.
 * @param resource The CDK resource
 * @param rules The CFN NAG suppress rules
 */
function addCfnSuppressRules(resource, rules) {
    if (resource instanceof cdk.Resource) {
        resource = resource.node.defaultChild;
    }
    if (resource.cfnOptions.metadata?.cfn_nag?.rules_to_suppress) {
        resource.cfnOptions.metadata?.cfn_nag.rules_to_suppress.push(...rules);
    }
    else {
        resource.addMetadata('cfn_nag', {
            rules_to_suppress: rules
        });
    }
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * Adds CfnGuard suppress rules to the CDK resource.
 * @param resource The CDK resource
 * @param rules The CfnGaurd rules to suppress
 */
function addCfnGuardSuppressRules(resource /* cdk.Resource | cdk.CfnResource | IRole */, rules) {
    if (resource instanceof cdk.Resource) {
        resource = resource.node.findChild('Resource');
    }
    if (resource.cfnOptions.metadata?.guard?.SuppressedRules) {
        resource.cfnOptions.metadata?.guard.SuppressedRules.push(...rules);
    }
    else {
        resource.addMetadata('guard', {
            SuppressedRules: rules
        });
    }
}
function suppressVpcCustomerHandlerRoleWarnings(stack) {
    stack.node.children.forEach(child => {
        if (child.node.id === "Custom::VpcRestrictDefaultSGCustomResourceProvider") {
            const role = child.role;
            // Turn off all warnings coming from custom resource
            addCfnGuardSuppressRules(role, []);
        }
    });
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * Creates the props to be used to instantiate a CDK L2 construct within a Solutions Construct
 *
 * @param defaultProps The default props to be used by the construct
 * @param clientProps Optional properties passed in from the client in the props object
 * @param constructProps Optional properties required by the construct for the construct to work (override any other values)
 * @returns The properties to use - all values prioritized:
 *  1) constructProps value
 *  2) clientProps value
 *  3) defaultProps value
 */
function consolidateProps(defaultProps, clientProps, constructProps, concatArray = false) {
    let result = defaultProps;
    if (clientProps) {
        result = overrideProps(result, clientProps, concatArray);
    }
    if (constructProps) {
        // Suppress warnings for construct props overriding everything else
        result = overrideProps(result, constructProps, concatArray, true);
    }
    return result;
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * Generates a name unique to this location in this stack with this stackname. Truncates to under 64 characters if needed.
 * (will allow 2 copies of the stack with different stack names, but will collide if both stacks have the same name)
 *
 * @param scope the construct within to create the name
 * @param resourceId an id for the construct about to be created under scope (empty string if name is for scoep)
 * @returns a unique name
 *
 * Note: This appears to overlap with GenerateResourceName above (I wrote it before noticing that
 * function). As this offloads the logic to the CDK, I'm leaving this here but someone may want to
 * blend these routines in the future.
 */
function generateName(scope, resourceId = "") {
    const name = resourceId + cdk.Names.uniqueId(scope);
    if (name.length > 64) {
        return name.substring(0, 32) + name.substring(name.length - 32);
    }
    return name;
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function CheckListValues(allowedPermissions, submittedValues, valueType) {
    submittedValues.forEach((submittedValue) => {
        if (!allowedPermissions.includes(submittedValue)) {
            throw Error(`Invalid ${valueType} submitted - ${submittedValue}`);
        }
    });
}
function CheckBooleanWithDefault(value, defaultValue) {
    if (value === undefined) {
        return defaultValue;
    }
    else {
        return value;
    }
}
function CheckStringWithDefault(value, defaultValue) {
    if (value === undefined) {
        return defaultValue;
    }
    else {
        return value;
    }
}
//# sourceMappingURL=data:application/json;base64,