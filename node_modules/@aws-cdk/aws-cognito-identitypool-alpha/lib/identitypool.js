"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentityPool = exports.IdentityPoolProviderUrl = exports.IdentityPoolProviderType = void 0;
const jsiiDeprecationWarnings = require("../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cognito_1 = require("aws-cdk-lib/aws-cognito");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const core_1 = require("aws-cdk-lib/core");
const identitypool_role_attachment_1 = require("./identitypool-role-attachment");
/**
 * Types of Identity Pool Login Providers
 */
var IdentityPoolProviderType;
(function (IdentityPoolProviderType) {
    /** Facebook Provider type */
    IdentityPoolProviderType["FACEBOOK"] = "Facebook";
    /** Google Provider Type */
    IdentityPoolProviderType["GOOGLE"] = "Google";
    /** Amazon Provider Type */
    IdentityPoolProviderType["AMAZON"] = "Amazon";
    /** Apple Provider Type */
    IdentityPoolProviderType["APPLE"] = "Apple";
    /** Twitter Provider Type */
    IdentityPoolProviderType["TWITTER"] = "Twitter";
    /** Digits Provider Type */
    IdentityPoolProviderType["DIGITS"] = "Digits";
    /** Open Id Provider Type */
    IdentityPoolProviderType["OPEN_ID"] = "OpenId";
    /** Saml Provider Type */
    IdentityPoolProviderType["SAML"] = "Saml";
    /** User Pool Provider Type */
    IdentityPoolProviderType["USER_POOL"] = "UserPool";
    /** Custom Provider Type */
    IdentityPoolProviderType["CUSTOM"] = "Custom";
})(IdentityPoolProviderType || (exports.IdentityPoolProviderType = IdentityPoolProviderType = {}));
/**
 * Keys for Login Providers - correspond to client id's of respective federation identity providers
 */
class IdentityPoolProviderUrl {
    /** OpenId Provider Url */
    static openId(url) {
        return new IdentityPoolProviderUrl(IdentityPoolProviderType.OPEN_ID, url);
    }
    /** Saml Provider Url */
    static saml(url) {
        return new IdentityPoolProviderUrl(IdentityPoolProviderType.SAML, url);
    }
    /** User Pool Provider Url */
    static userPool(userPool, userPoolClient) {
        const url = `${userPool.userPoolProviderName}:${userPoolClient.userPoolClientId}`;
        return new IdentityPoolProviderUrl(IdentityPoolProviderType.USER_POOL, url);
    }
    /** Custom Provider Url */
    static custom(url) {
        return new IdentityPoolProviderUrl(IdentityPoolProviderType.CUSTOM, url);
    }
    constructor(
    /** type of Provider Url */
    type, 
    /** value of Provider Url */
    value) {
        this.type = type;
        this.value = value;
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_cognito_identitypool_alpha_IdentityPoolProviderType(type);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, IdentityPoolProviderUrl);
            }
            throw error;
        }
    }
}
exports.IdentityPoolProviderUrl = IdentityPoolProviderUrl;
_a = JSII_RTTI_SYMBOL_1;
IdentityPoolProviderUrl[_a] = { fqn: "@aws-cdk/aws-cognito-identitypool-alpha.IdentityPoolProviderUrl", version: "2.154.1-alpha.0" };
/** Facebook Provider Url */
IdentityPoolProviderUrl.FACEBOOK = new IdentityPoolProviderUrl(IdentityPoolProviderType.FACEBOOK, 'graph.facebook.com');
/** Google Provider Url */
IdentityPoolProviderUrl.GOOGLE = new IdentityPoolProviderUrl(IdentityPoolProviderType.GOOGLE, 'accounts.google.com');
/** Amazon Provider Url */
IdentityPoolProviderUrl.AMAZON = new IdentityPoolProviderUrl(IdentityPoolProviderType.AMAZON, 'www.amazon.com');
/** Apple Provider Url */
IdentityPoolProviderUrl.APPLE = new IdentityPoolProviderUrl(IdentityPoolProviderType.APPLE, 'appleid.apple.com');
/** Twitter Provider Url */
IdentityPoolProviderUrl.TWITTER = new IdentityPoolProviderUrl(IdentityPoolProviderType.TWITTER, 'api.twitter.com');
/** Digits Provider Url */
IdentityPoolProviderUrl.DIGITS = new IdentityPoolProviderUrl(IdentityPoolProviderType.DIGITS, 'www.digits.com');
/**
 * Define a Cognito Identity Pool
 *
 *  @resource AWS::Cognito::IdentityPool
 */
class IdentityPool extends core_1.Resource {
    /**
     * Import an existing Identity Pool from its id
     */
    static fromIdentityPoolId(scope, id, identityPoolId) {
        const identityPoolArn = core_1.Stack.of(scope).formatArn({
            service: 'cognito-identity',
            resource: 'identitypool',
            resourceName: identityPoolId,
            arnFormat: core_1.ArnFormat.SLASH_RESOURCE_NAME,
        });
        return IdentityPool.fromIdentityPoolArn(scope, id, identityPoolArn);
    }
    /**
     * Import an existing Identity Pool from its Arn
     */
    static fromIdentityPoolArn(scope, id, identityPoolArn) {
        const pool = core_1.Stack.of(scope).splitArn(identityPoolArn, core_1.ArnFormat.SLASH_RESOURCE_NAME);
        const res = pool.resourceName || '';
        if (!res) {
            throw new Error('Invalid Identity Pool ARN');
        }
        if (!core_1.Token.isUnresolved(res)) {
            const idParts = res.split(':');
            if (!(idParts.length === 2)) {
                throw new Error('Invalid Identity Pool Id: Identity Pool Ids must follow the format <region>:<id>');
            }
            if (!core_1.Token.isUnresolved(pool.region) && idParts[0] !== pool.region) {
                throw new Error('Invalid Identity Pool Id: Region in Identity Pool Id must match stack region');
            }
        }
        class ImportedIdentityPool extends core_1.Resource {
            constructor() {
                super(scope, id, {
                    account: pool.account,
                    region: pool.region,
                });
                this.identityPoolId = res;
                this.identityPoolArn = identityPoolArn;
                this.identityPoolName = this.physicalName;
            }
        }
        return new ImportedIdentityPool();
    }
    constructor(scope, id, props = {}) {
        super(scope, id, {
            physicalName: props.identityPoolName,
        });
        /**
         * List of Identity Providers added in constructor for use with property overrides
         */
        this.cognitoIdentityProviders = [];
        /**
         * Running count of added role attachments
         */
        this.roleAttachmentCount = 0;
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_cognito_identitypool_alpha_IdentityPoolProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, IdentityPool);
            }
            throw error;
        }
        const authProviders = props.authenticationProviders || {};
        const providers = authProviders.userPools ? authProviders.userPools.map(userPool => userPool.bind(this, this)) : undefined;
        if (providers && providers.length)
            this.cognitoIdentityProviders = providers;
        const openIdConnectProviderArns = authProviders.openIdConnectProviders ?
            authProviders.openIdConnectProviders.map(openIdProvider => openIdProvider.openIdConnectProviderArn) : undefined;
        const samlProviderArns = authProviders.samlProviders ?
            authProviders.samlProviders.map(samlProvider => samlProvider.samlProviderArn) : undefined;
        let supportedLoginProviders = {};
        if (authProviders.amazon)
            supportedLoginProviders[IdentityPoolProviderUrl.AMAZON.value] = authProviders.amazon.appId;
        if (authProviders.facebook)
            supportedLoginProviders[IdentityPoolProviderUrl.FACEBOOK.value] = authProviders.facebook.appId;
        if (authProviders.google)
            supportedLoginProviders[IdentityPoolProviderUrl.GOOGLE.value] = authProviders.google.clientId;
        if (authProviders.apple)
            supportedLoginProviders[IdentityPoolProviderUrl.APPLE.value] = authProviders.apple.servicesId;
        if (authProviders.twitter)
            supportedLoginProviders[IdentityPoolProviderUrl.TWITTER.value] = `${authProviders.twitter.consumerKey};${authProviders.twitter.consumerSecret}`;
        if (authProviders.digits)
            supportedLoginProviders[IdentityPoolProviderUrl.DIGITS.value] = `${authProviders.digits.consumerKey};${authProviders.digits.consumerSecret}`;
        if (!Object.keys(supportedLoginProviders).length)
            supportedLoginProviders = undefined;
        const cfnIdentityPool = new aws_cognito_1.CfnIdentityPool(this, 'Resource', {
            allowUnauthenticatedIdentities: props.allowUnauthenticatedIdentities ? true : false,
            allowClassicFlow: props.allowClassicFlow,
            identityPoolName: this.physicalName,
            developerProviderName: authProviders.customProvider,
            openIdConnectProviderArns,
            samlProviderArns,
            supportedLoginProviders,
            cognitoIdentityProviders: core_1.Lazy.any({ produce: () => this.cognitoIdentityProviders }),
        });
        this.identityPoolName = cfnIdentityPool.attrName;
        this.identityPoolId = cfnIdentityPool.ref;
        this.identityPoolArn = core_1.Stack.of(scope).formatArn({
            service: 'cognito-identity',
            resource: 'identitypool',
            resourceName: this.identityPoolId,
            arnFormat: core_1.ArnFormat.SLASH_RESOURCE_NAME,
        });
        this.authenticatedRole = props.authenticatedRole ? props.authenticatedRole : this.configureDefaultRole('Authenticated');
        this.unauthenticatedRole = props.unauthenticatedRole ? props.unauthenticatedRole : this.configureDefaultRole('Unauthenticated');
        const attachment = new identitypool_role_attachment_1.IdentityPoolRoleAttachment(this, 'DefaultRoleAttachment', {
            identityPool: this,
            authenticatedRole: this.authenticatedRole,
            unauthenticatedRole: this.unauthenticatedRole,
            roleMappings: props.roleMappings,
        });
        // This added by the original author, but it's causing cyclic dependencies.
        // Don't know why this was added in the first place, but I'm disabling it for now and if
        // no complaints come from this, we're probably safe to remove it altogether.
        // attachment.node.addDependency(this);
        Array.isArray(attachment);
    }
    /**
     * Add a User Pool to the IdentityPool and configure User Pool Client to handle identities
     */
    addUserPoolAuthentication(userPool) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_cognito_identitypool_alpha_IUserPoolAuthenticationProvider(userPool);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addUserPoolAuthentication);
            }
            throw error;
        }
        const providers = userPool.bind(this, this);
        this.cognitoIdentityProviders = this.cognitoIdentityProviders.concat(providers);
    }
    /**
     * Adds Role Mappings to Identity Pool
    */
    addRoleMappings(...roleMappings) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_cognito_identitypool_alpha_IdentityPoolRoleMapping(roleMappings);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addRoleMappings);
            }
            throw error;
        }
        if (!roleMappings || !roleMappings.length)
            return;
        this.roleAttachmentCount++;
        const name = 'RoleMappingAttachment' + this.roleAttachmentCount.toString();
        const attachment = new identitypool_role_attachment_1.IdentityPoolRoleAttachment(this, name, {
            identityPool: this,
            authenticatedRole: this.authenticatedRole,
            unauthenticatedRole: this.unauthenticatedRole,
            roleMappings,
        });
        // This added by the original author, but it's causing cyclic dependencies.
        // Don't know why this was added in the first place, but I'm disabling it for now and if
        // no complaints come from this, we're probably safe to remove it altogether.
        // attachment.node.addDependency(this);
        Array.isArray(attachment);
    }
    /**
     * Configure Default Roles For Identity Pool
     */
    configureDefaultRole(type) {
        const assumedBy = this.configureDefaultGrantPrincipal(type.toLowerCase());
        const role = new aws_iam_1.Role(this, `${type}Role`, {
            description: `Default ${type} Role for Identity Pool ${this.identityPoolName}`,
            assumedBy,
        });
        return role;
    }
    configureDefaultGrantPrincipal(type) {
        return new aws_iam_1.FederatedPrincipal('cognito-identity.amazonaws.com', {
            'StringEquals': {
                'cognito-identity.amazonaws.com:aud': this.identityPoolId,
            },
            'ForAnyValue:StringLike': {
                'cognito-identity.amazonaws.com:amr': type,
            },
        }, 'sts:AssumeRoleWithWebIdentity');
    }
}
exports.IdentityPool = IdentityPool;
_b = JSII_RTTI_SYMBOL_1;
IdentityPool[_b] = { fqn: "@aws-cdk/aws-cognito-identitypool-alpha.IdentityPool", version: "2.154.1-alpha.0" };
//# sourceMappingURL=data:application/json;base64,