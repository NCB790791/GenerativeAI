"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodejsBuild = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const path_1 = require("path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_codebuild_1 = require("aws-cdk-lib/aws-codebuild");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const aws_s3_assets_1 = require("aws-cdk-lib/aws-s3-assets");
const aws_s3_deployment_1 = require("aws-cdk-lib/aws-s3-deployment");
const constructs_1 = require("constructs");
/**
 * Build Node.js app and optionally publish the artifact to an S3 bucket.
 */
class NodejsBuild extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const handler = new aws_lambda_1.SingletonFunction(this, 'CustomResourceHandler', {
            // Use raw string to avoid from tightening CDK version requirement
            runtime: new aws_lambda_1.Runtime('nodejs18.x', aws_lambda_1.RuntimeFamily.NODEJS),
            code: aws_lambda_1.Code.fromAsset((0, path_1.join)(__dirname, '../lambda/trigger-codebuild/dist')),
            handler: 'index.handler',
            uuid: '25648b21-2c40-4f09-aa65-b6bbb0c44659', // generated for this construct
            lambdaPurpose: 'NodejsBuildCustomResourceHandler',
            timeout: aws_cdk_lib_1.Duration.minutes(5),
        });
        const nodejsVersion = props.nodejsVersion ?? 18;
        let buildImage = 'aws/codebuild/standard:7.0';
        // See: https://docs.aws.amazon.com/codebuild/latest/userguide/available-runtimes.html#linux-runtimes
        switch (nodejsVersion) {
            case 12:
            case 14:
                buildImage = 'aws/codebuild/standard:5.0';
                break;
            case 16:
                buildImage = 'aws/codebuild/standard:6.0';
                break;
            case 18:
            case 20:
                buildImage = 'aws/codebuild/standard:7.0';
                break;
            default:
                aws_cdk_lib_1.Annotations.of(this).addWarning(`Possibly unsupported Node.js version: ${nodejsVersion}. Currently 12, 14, 16, 18, and 20 are supported.`);
        }
        const destinationObjectKeyOutputKey = 'destinationObjectKey';
        const envFileKeyOutputKey = 'envFileKey';
        const project = new aws_codebuild_1.Project(this, 'Project', {
            environment: { buildImage: aws_codebuild_1.LinuxBuildImage.fromCodeBuildImageId(buildImage) },
            buildSpec: aws_codebuild_1.BuildSpec.fromObject({
                version: '0.2',
                env: {
                    shell: 'bash',
                },
                phases: {
                    install: {
                        'runtime-versions': {
                            nodejs: nodejsVersion,
                        },
                    },
                    build: {
                        commands: [
                            'current_dir=$(pwd)',
                            // Iterate a json array using jq
                            // https://www.starkandwayne.com/blog/bash-for-loop-over-json-array-using-jq/index.html
                            `
echo "$input"
for obj in $(echo "$input" | jq -r '.[] | @base64'); do
  decoded=$(echo "$obj" | base64 --decode)
  assetUrl=$(echo "$decoded" | jq -r '.assetUrl')
  extractPath=$(echo "$decoded" | jq -r '.extractPath')
  commands=$(echo "$decoded" | jq -r '.commands')

  # Download the zip file
  aws s3 cp "$assetUrl" temp.zip

  # Extract the zip file to the extractPath directory
  mkdir -p "$extractPath"
  unzip temp.zip -d "$extractPath"

  # Remove the zip file
  rm temp.zip

  # Run the specified commands in the extractPath directory
  cd "$extractPath"
  ls -la
  eval "$commands"
  cd "$current_dir"
  ls -la
done
              `,
                            'ls -la',
                            'cd "$workingDirectory"',
                            'eval "$buildCommands"',
                            'ls -la',
                            'cd "$current_dir"',
                            'cd "$outputSourceDirectory"',
                            'zip -r output.zip ./',
                            'aws s3 cp output.zip "s3://$destinationBucketName/$destinationObjectKey"',
                            // Upload .env if required
                            `
if [[ $outputEnvFile == "true" ]]
then
  # Split the comma-separated string into an array
  for var_name in \${envNames//,/ }
  do
      echo "Element: $var_name"
      var_value="\${!var_name}"
      echo "$var_name=$var_value" >> tmp.env
  done

  aws s3 cp tmp.env "s3://$destinationBucketName/$envFileKey"
fi
              `,
                        ],
                    },
                    post_build: {
                        commands: [
                            'echo Build completed on `date`',
                            `
STATUS='SUCCESS'
if [ $CODEBUILD_BUILD_SUCCEEDING -ne 1 ] # Test if the build is failing
then
STATUS='FAILED'
REASON="NodejsBuild failed. See CloudWatch Log stream for the detailed reason: 
https://$AWS_REGION.console.aws.amazon.com/cloudwatch/home?region=$AWS_REGION#logsV2:log-groups/log-group/\\$252Faws\\$252Fcodebuild\\$252F$projectName/log-events/$CODEBUILD_LOG_PATH"
fi
cat <<EOF > payload.json
{
  "StackId": "$stackId",
  "RequestId": "$requestId",
  "LogicalResourceId":"$logicalResourceId",
  "PhysicalResourceId": "$logicalResourceId",
  "Status": "$STATUS",
  "Reason": "$REASON",
  "Data": {
    "${destinationObjectKeyOutputKey}": "$destinationObjectKey",
    "${envFileKeyOutputKey}": "$envFileKey"
  }
}
EOF
curl -v -i -X PUT -H 'Content-Type:' -d "@payload.json" "$responseURL"
              `,
                        ],
                    },
                },
            }),
        });
        handler.addToRolePolicy(new aws_iam_1.PolicyStatement({
            actions: ['codebuild:StartBuild'],
            resources: [project.projectArn],
        }));
        this.grantPrincipal = project.grantPrincipal;
        const commonExclude = ['.DS_Store', '.git', 'node_modules'];
        const assets = props.assets.map((assetProps) => {
            const asset = new aws_s3_assets_1.Asset(this, `Source-${assetProps.path.replace('/', '')}`, {
                ...assetProps,
                ...(props.excludeCommonFiles ?? true ? { exclude: [...commonExclude, ...(assetProps.exclude ?? [])] } : {}),
            });
            asset.grantRead(project);
            return asset;
        });
        // use the asset bucket that are created by CDK bootstrap to store intermediate artifacts
        const bucket = assets[0].bucket;
        bucket.grantWrite(project);
        const sources = props.assets.map((s, i) => ({
            sourceBucketName: assets[i].s3BucketName,
            sourceObjectKey: assets[i].s3ObjectKey,
            extractPath: s.extractPath ?? (0, path_1.basename)(s.path),
            commands: s.commands,
        }));
        const properties = {
            type: 'NodejsBuild',
            sources,
            destinationBucketName: bucket.bucketName,
            workingDirectory: sources[0].extractPath,
            // join paths for CodeBuild (Linux) platform
            outputSourceDirectory: path_1.posix.join(sources[0].extractPath, props.outputSourceDirectory),
            environment: props.buildEnvironment,
            buildCommands: props.buildCommands ?? ['npm run build'],
            codeBuildProjectName: project.projectName,
            outputEnvFile: props.outputEnvFile ?? false,
        };
        const custom = new aws_cdk_lib_1.CustomResource(this, 'Resource', {
            serviceToken: handler.functionArn,
            resourceType: 'Custom::CDKNodejsBuild',
            properties,
        });
        const deploy = new aws_s3_deployment_1.BucketDeployment(this, 'Deploy', {
            sources: [aws_s3_deployment_1.Source.bucket(bucket, custom.getAttString(destinationObjectKeyOutputKey))],
            destinationBucket: props.destinationBucket,
            destinationKeyPrefix: props.destinationKeyPrefix,
            distribution: props.distribution,
        });
        deploy.node.addDependency(custom);
        if (props.outputEnvFile) {
            new aws_cdk_lib_1.CfnOutput(this, 'DownloadEnvFile', { value: `aws s3 cp ${bucket.s3UrlForObject(custom.getAttString(envFileKeyOutputKey))} .env.local` });
        }
    }
}
exports.NodejsBuild = NodejsBuild;
_a = JSII_RTTI_SYMBOL_1;
NodejsBuild[_a] = { fqn: "deploy-time-build.NodejsBuild", version: "0.3.24" };
//# sourceMappingURL=data:application/json;base64,