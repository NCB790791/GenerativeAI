"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SingletonProject = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_codebuild_1 = require("aws-cdk-lib/aws-codebuild");
const constructs_1 = require("constructs");
/**
 * A CodeBuild project that is created only once per stack.
 */
class SingletonProject extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.project = this.ensureProject(props);
    }
    ensureProject(props) {
        const constructName = (props.projectPurpose ?? 'SingletonProject') + this.slugify(props.uuid, this.propsToAdditionalString(props));
        const existing = aws_cdk_lib_1.Stack.of(this).node.tryFindChild(constructName);
        if (existing) {
            return existing;
        }
        return new aws_codebuild_1.Project(aws_cdk_lib_1.Stack.of(this), constructName, props);
    }
    propsToAdditionalString(props) {
        // This string must be stable to avoid from replacement.
        // Things that can be added to the slug later (we have to create a new project per these properties):
        //   * vpc addr
        //   * instance type
        // But actually, replacement will not cause any disruption because of its stateless nature.
        let slug = '';
        slug += props.vpc?.node.addr ?? '';
        return slug;
    }
    slugify(x, additionalString) {
        return `${x}${additionalString ?? ''}`.replace(/[^a-zA-Z0-9]/g, '');
    }
}
exports.SingletonProject = SingletonProject;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xldG9uLXByb2plY3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc2luZ2xldG9uLXByb2plY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQW9DO0FBQ3BDLDZEQUFrRTtBQUNsRSwyQ0FBdUM7QUFvQnZDOztHQUVHO0FBQ0gsTUFBYSxnQkFBaUIsU0FBUSxzQkFBUztJQUc3QyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQTRCO1FBQ3BFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFTyxhQUFhLENBQUMsS0FBNEI7UUFDaEQsTUFBTSxhQUFhLEdBQUcsQ0FBQyxLQUFLLENBQUMsY0FBYyxJQUFJLGtCQUFrQixDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ25JLE1BQU0sUUFBUSxHQUFHLG1CQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDakUsSUFBSSxRQUFRLEVBQUUsQ0FBQztZQUNiLE9BQU8sUUFBbUIsQ0FBQztRQUM3QixDQUFDO1FBRUQsT0FBTyxJQUFJLHVCQUFPLENBQUMsbUJBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFTyx1QkFBdUIsQ0FBQyxLQUE0QjtRQUMxRCx3REFBd0Q7UUFDeEQscUdBQXFHO1FBQ3JHLGVBQWU7UUFDZixvQkFBb0I7UUFDcEIsMkZBQTJGO1FBQzNGLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNkLElBQUksSUFBSSxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ25DLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVPLE9BQU8sQ0FBQyxDQUFTLEVBQUUsZ0JBQXlCO1FBQ2xELE9BQU8sR0FBRyxDQUFDLEdBQUcsZ0JBQWdCLElBQUksRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN0RSxDQUFDO0NBQ0Y7QUFoQ0QsNENBZ0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhY2sgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBQcm9qZWN0LCBQcm9qZWN0UHJvcHMgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtY29kZWJ1aWxkJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNpbmdsZXRvblByb2plY3RQcm9wcyBleHRlbmRzIFByb2plY3RQcm9wcyB7XG4gIC8qKlxuICAgKiBBIHVuaXF1ZSBpZGVudGlmaWVyIHRvIGlkZW50aWZ5IHRoaXMgQ29kZUJ1aWxkIHByb2plY3QuXG4gICAqXG4gICAqIFRoZSBpZGVudGlmaWVyIHNob3VsZCBiZSB1bmlxdWUgYWNyb3NzIGFsbCBzaW5nbGV0b24gcHJvamVjdHMuIFdlIHJlY29tbWVuZCBnZW5lcmF0aW5nIGEgVVVJRCBwZXIgcHJvamVjdC5cbiAgICovXG4gIHJlYWRvbmx5IHV1aWQ6IHN0cmluZztcblxuICAvKipcbiAgICogQSBkZXNjcmlwdGl2ZSBuYW1lIGZvciB0aGUgcHVycG9zZSBvZiB0aGlzIENvZGVCdWlsZCBwcm9qZWN0LlxuICAgKlxuICAgKiBJZiB0aGUgcHJvamVjdCBkb2VzIG5vdCBoYXZlIGEgcGh5c2ljYWwgbmFtZSwgdGhpcyBzdHJpbmcgd2lsbCBiZSByZWZsZWN0ZWQgaXRzIGdlbmVyYXRlZCBuYW1lLiBUaGUgY29tYmluYXRpb24gb2YgcHJvamVjdFB1cnBvc2UgYW5kIHV1aWQgbXVzdCBiZSB1bmlxdWUuXG4gICAqXG4gICAqIEBkZWZhdWx0IFNpbmdsZXRvblByb2plY3RcbiAgICovXG4gIHJlYWRvbmx5IHByb2plY3RQdXJwb3NlPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEEgQ29kZUJ1aWxkIHByb2plY3QgdGhhdCBpcyBjcmVhdGVkIG9ubHkgb25jZSBwZXIgc3RhY2suXG4gKi9cbmV4cG9ydCBjbGFzcyBTaW5nbGV0b25Qcm9qZWN0IGV4dGVuZHMgQ29uc3RydWN0IHtcbiAgcHVibGljIHJlYWRvbmx5IHByb2plY3Q6IFByb2plY3Q7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFNpbmdsZXRvblByb2plY3RQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgdGhpcy5wcm9qZWN0ID0gdGhpcy5lbnN1cmVQcm9qZWN0KHByb3BzKTtcbiAgfVxuXG4gIHByaXZhdGUgZW5zdXJlUHJvamVjdChwcm9wczogU2luZ2xldG9uUHJvamVjdFByb3BzKTogUHJvamVjdCB7XG4gICAgY29uc3QgY29uc3RydWN0TmFtZSA9IChwcm9wcy5wcm9qZWN0UHVycG9zZSA/PyAnU2luZ2xldG9uUHJvamVjdCcpICsgdGhpcy5zbHVnaWZ5KHByb3BzLnV1aWQsIHRoaXMucHJvcHNUb0FkZGl0aW9uYWxTdHJpbmcocHJvcHMpKTtcbiAgICBjb25zdCBleGlzdGluZyA9IFN0YWNrLm9mKHRoaXMpLm5vZGUudHJ5RmluZENoaWxkKGNvbnN0cnVjdE5hbWUpO1xuICAgIGlmIChleGlzdGluZykge1xuICAgICAgcmV0dXJuIGV4aXN0aW5nIGFzIFByb2plY3Q7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9qZWN0KFN0YWNrLm9mKHRoaXMpLCBjb25zdHJ1Y3ROYW1lLCBwcm9wcyk7XG4gIH1cblxuICBwcml2YXRlIHByb3BzVG9BZGRpdGlvbmFsU3RyaW5nKHByb3BzOiBTaW5nbGV0b25Qcm9qZWN0UHJvcHMpIHtcbiAgICAvLyBUaGlzIHN0cmluZyBtdXN0IGJlIHN0YWJsZSB0byBhdm9pZCBmcm9tIHJlcGxhY2VtZW50LlxuICAgIC8vIFRoaW5ncyB0aGF0IGNhbiBiZSBhZGRlZCB0byB0aGUgc2x1ZyBsYXRlciAod2UgaGF2ZSB0byBjcmVhdGUgYSBuZXcgcHJvamVjdCBwZXIgdGhlc2UgcHJvcGVydGllcyk6XG4gICAgLy8gICAqIHZwYyBhZGRyXG4gICAgLy8gICAqIGluc3RhbmNlIHR5cGVcbiAgICAvLyBCdXQgYWN0dWFsbHksIHJlcGxhY2VtZW50IHdpbGwgbm90IGNhdXNlIGFueSBkaXNydXB0aW9uIGJlY2F1c2Ugb2YgaXRzIHN0YXRlbGVzcyBuYXR1cmUuXG4gICAgbGV0IHNsdWcgPSAnJztcbiAgICBzbHVnICs9IHByb3BzLnZwYz8ubm9kZS5hZGRyID8/ICcnO1xuICAgIHJldHVybiBzbHVnO1xuICB9XG5cbiAgcHJpdmF0ZSBzbHVnaWZ5KHg6IHN0cmluZywgYWRkaXRpb25hbFN0cmluZz86IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke3h9JHthZGRpdGlvbmFsU3RyaW5nID8/ICcnfWAucmVwbGFjZSgvW15hLXpBLVowLTldL2csICcnKTtcbiAgfVxufVxuIl19