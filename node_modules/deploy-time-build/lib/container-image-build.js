"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContainerImageBuild = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const crypto_1 = require("crypto");
const fs_1 = require("fs");
const path_1 = require("path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_codebuild_1 = require("aws-cdk-lib/aws-codebuild");
const aws_ecr_1 = require("aws-cdk-lib/aws-ecr");
const aws_ecs_1 = require("aws-cdk-lib/aws-ecs");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const aws_s3_assets_1 = require("aws-cdk-lib/aws-s3-assets");
const constructs_1 = require("constructs");
const singleton_project_1 = require("./singleton-project");
/**
 * Build a container image and push it to an ECR repository on deploy-time.
 */
class ContainerImageBuild extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props;
        const handler = new aws_lambda_1.SingletonFunction(this, 'CustomResourceHandler', {
            // Use raw string to avoid from tightening CDK version requirement
            runtime: new aws_lambda_1.Runtime('nodejs18.x', aws_lambda_1.RuntimeFamily.NODEJS),
            code: aws_lambda_1.Code.fromAsset((0, path_1.join)(__dirname, '../lambda/trigger-codebuild/dist')),
            handler: 'index.handler',
            uuid: 'db740fd5-5436-4a84-8a09-e6dfcd01f4f3', // generated for this construct
            lambdaPurpose: 'DeployTimeBuildCustomResourceHandler',
            timeout: aws_cdk_lib_1.Duration.minutes(5),
        });
        // use buildx for cross-platform image build.
        // because soci-snapshotter currently only supports amd64 environment.
        // const armImage = LinuxArmBuildImage.fromCodeBuildImageId('aws/codebuild/amazonlinux2-aarch64-standard:3.0');
        const x64Image = aws_codebuild_1.LinuxBuildImage.fromCodeBuildImageId('aws/codebuild/standard:7.0');
        // const buildImage = props.platform == Platform.LINUX_ARM64 ? armImage : x64Image;
        const buildImage = x64Image;
        let repository = props.repository;
        if (repository === undefined) {
            repository = new aws_ecr_1.Repository(this, 'Repository', { removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY });
            repository.node.defaultChild.addPropertyOverride('EmptyOnDelete', true);
        }
        const project = new singleton_project_1.SingletonProject(this, 'Project', {
            uuid: 'e83729fe-b156-4e70-9bec-452b15847a30',
            projectPurpose: 'ContainerImageBuildAmd64',
            environment: {
                buildImage: buildImage,
                privileged: true,
            },
            vpc: props.vpc,
            buildSpec: aws_codebuild_1.BuildSpec.fromObject({
                version: '0.2',
                phases: {
                    build: {
                        commands: [
                            'current_dir=$(pwd)',
                            'echo "$input"',
                            'mkdir workdir',
                            'cd workdir',
                            'aws s3 cp "$sourceS3Url" temp.zip',
                            'unzip temp.zip',
                            'ls -la',
                            'aws ecr get-login-password | docker login --username AWS --password-stdin $repositoryAuthUri',
                            'aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws',
                            'docker buildx create --use',
                            'docker buildx ls',
                            'eval "$buildCommand"',
                        ],
                    },
                    post_build: {
                        commands: [
                            'echo Build completed on `date`',
                            `
STATUS='SUCCESS'
if [ $CODEBUILD_BUILD_SUCCEEDING -ne 1 ] # Test if the build is failing
then
STATUS='FAILED'
REASON="ContainerImageBuild failed. See CloudWatch Log stream for the detailed reason: 
https://$AWS_REGION.console.aws.amazon.com/cloudwatch/home?region=$AWS_REGION#logsV2:log-groups/log-group/\\$252Faws\\$252Fcodebuild\\$252F$projectName/log-events/$CODEBUILD_LOG_PATH"
fi
cat <<EOF > payload.json
{
  "StackId": "$stackId",
  "RequestId": "$requestId",
  "LogicalResourceId":"$logicalResourceId",
  "PhysicalResourceId": "$imageTag",
  "Status": "$STATUS",
  "Reason": "$REASON",
  "Data": {
    "ImageTag": "$imageTag"
  }
}
EOF
curl -v -i -X PUT -H 'Content-Type:' -d "@payload.json" "$responseURL"
              `,
                        ],
                    },
                },
            }),
        }).project;
        project.role.addManagedPolicy(aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName('AmazonElasticContainerRegistryPublicReadOnly'));
        repository.grantPullPush(project);
        repository.grant(project, 'ecr:DescribeImages');
        handler.addToRolePolicy(new aws_iam_1.PolicyStatement({
            actions: ['codebuild:StartBuild'],
            resources: [project.projectArn],
        }));
        this.grantPrincipal = project.grantPrincipal;
        let assetExclude = props.exclude;
        // automatically read .dockerignore for convenience
        if (assetExclude === undefined && (0, fs_1.existsSync)((0, path_1.join)(props.directory, '.dockerignore'))) {
            assetExclude = (0, fs_1.readFileSync)((0, path_1.join)(props.directory, '.dockerignore')).toString().split('\n');
        }
        const asset = new aws_s3_assets_1.Asset(this, 'Source', {
            ...props,
            exclude: assetExclude,
            path: props.directory,
        });
        asset.grantRead(project);
        const imageTag = props.tag ?? this.getImageHash(asset.assetHash, props);
        const buildCommandOptions = { ...props, tag: imageTag, platform: props.platform?.platform };
        buildCommandOptions.outputs ?? (buildCommandOptions.outputs = []);
        // to enable zstd compression, buildx directly pushes the artifact image to a registry
        // https://aws.amazon.com/blogs/containers/reducing-aws-fargate-startup-times-with-zstd-compressed-container-images/
        buildCommandOptions.outputs.push('type=image', `name=${repository.repositoryUri}:${imageTag}`, 'push=true');
        if (props.zstdCompression) {
            buildCommandOptions.outputs.push('oci-mediatypes=true', 'compression=zstd', 'force-compression=true', 'compression-level=3');
        }
        const buildCommand = this.getDockerBuildCommand(buildCommandOptions);
        const properties = {
            type: 'ContainerImageBuild',
            buildCommand: buildCommand,
            repositoryUri: repository.repositoryUri,
            imageTag,
            codeBuildProjectName: project.projectName,
            sourceS3Url: asset.s3ObjectUrl,
        };
        const custom = new aws_cdk_lib_1.CustomResource(this, 'Resource', {
            serviceToken: handler.functionArn,
            resourceType: 'Custom::CDKContainerImageBuild',
            properties,
        });
        this.repository = repository;
        this.imageTag = custom.getAttString('ImageTag');
    }
    /**
     * Get the instance of {@link DockerImageCode} for a Lambda function image.
     */
    toLambdaDockerImageCode() {
        if (this.props.zstdCompression) {
            throw new Error('You cannot enable zstdCompression for a Lambda image.');
        }
        return aws_lambda_1.DockerImageCode.fromEcr(this.repository, { tagOrDigest: this.imageTag });
    }
    /**
     * Get the instance of {@link ContainerImage} for an ECS task definition.
     */
    toEcsDockerImageCode() {
        return aws_ecs_1.ContainerImage.fromEcrRepository(this.repository, this.imageTag);
    }
    getImageHash(assetHash, props) {
        const extraHash = {};
        if (props.invalidation?.extraHash !== false && props.extraHash) {
            extraHash.user = props.extraHash;
        }
        if (props.invalidation?.buildArgs !== false && props.buildArgs) {
            extraHash.buildArgs = props.buildArgs;
        }
        if (props.invalidation?.buildSecrets !== false && props.buildSecrets) {
            extraHash.buildSecrets = props.buildSecrets;
        }
        if (props.invalidation?.buildSsh !== false && props.buildSsh) {
            extraHash.buildSsh = props.buildSsh;
        }
        if (props.invalidation?.target !== false && props.target) {
            extraHash.target = props.target;
        }
        if (props.invalidation?.file !== false && props.file) {
            extraHash.file = props.file;
        }
        if (props.invalidation?.repositoryName !== false && props.repositoryName) {
            extraHash.repositoryName = props.repositoryName;
        }
        if (props.invalidation?.networkMode !== false && props.networkMode) {
            extraHash.networkMode = props.networkMode;
        }
        if (props.invalidation?.platform !== false && props.platform) {
            extraHash.platform = props.platform.platform;
        }
        if (props.invalidation?.outputs !== false && props.outputs) {
            extraHash.outputs = props.outputs;
        }
        if (props.zstdCompression) {
            extraHash.zstdCompression = props.zstdCompression;
        }
        return (0, crypto_1.createHash)('md5')
            .update(assetHash + JSON.stringify(extraHash))
            .digest('hex');
    }
    getDockerBuildCommand(options) {
        // the members of props differs with CDK version.
        // By regarding props as any, we can use props that are not available in older cdk versions.
        // logic is copied from packages/cdk-assets/lib/private/docker.ts
        const cacheOptionToFlag = (option) => {
            let flag = `type=${option.type}`;
            if (option.params) {
                flag +=
                    ',' +
                        Object.entries(option.params)
                            .map(([k, v]) => `${k}=${v}`)
                            .join(',');
            }
            return flag;
        };
        const flatten = (x) => {
            return Array.prototype.concat([], ...x);
        };
        const dockerBuildCommand = [
            'docker buildx build',
            ...flatten(Object.entries(options.buildArgs || {}).map(([k, v]) => ['--build-arg', `${k}=${v}`])),
            ...flatten(Object.entries(options.buildSecrets || {}).map(([k, v]) => ['--secret', `id=${k},${v}`])),
            ...(options.buildSsh ? ['--ssh', options.buildSsh] : []),
            ...(options.target ? ['--target', options.target] : []),
            ...(options.file ? ['--file', options.file] : []),
            ...(options.networkMode ? ['--network', options.networkMode] : []),
            ...(options.platform ? ['--platform', options.platform] : []),
            ...(options.outputs ? ['--output', options.outputs.join(',')] : []),
            ...(options.cacheFrom ? [...options.cacheFrom.map((cacheFrom) => ['--cache-from', cacheOptionToFlag(cacheFrom)]).flat()] : []),
            ...(options.cacheTo ? ['--cache-to', cacheOptionToFlag(options.cacheTo)] : []),
            ...(options.cacheDisabled ? ['--no-cache'] : []),
            '--provenance=false',
            '.',
        ];
        return dockerBuildCommand.join(' ');
    }
}
exports.ContainerImageBuild = ContainerImageBuild;
_a = JSII_RTTI_SYMBOL_1;
ContainerImageBuild[_a] = { fqn: "deploy-time-build.ContainerImageBuild", version: "0.3.24" };
//# sourceMappingURL=data:application/json;base64,