"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SociIndexBuild = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const path_1 = require("path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_codebuild_1 = require("aws-cdk-lib/aws-codebuild");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const constructs_1 = require("constructs");
const singleton_project_1 = require("./singleton-project");
/**
 * Build and publish a SOCI index for a container image.
 * A SOCI index helps start Fargate tasks faster in some cases.
 * Please read the following document for more details: https://docs.aws.amazon.com/AmazonECS/latest/userguide/container-considerations.html
 */
class SociIndexBuild extends constructs_1.Construct {
    /**
     * A utility method to create a SociIndexBuild construct from a DockerImageAsset instance.
     */
    static fromDockerImageAsset(scope, id, imageAsset) {
        return new SociIndexBuild(scope, id, {
            repository: imageAsset.repository,
            imageTag: imageAsset.assetHash,
        });
    }
    constructor(scope, id, props) {
        super(scope, id);
        const sociWrapperVersion = 'v0.1.2';
        const binaryUrl = `https://github.com/tmokmss/soci-wrapper/releases/download/${sociWrapperVersion}/soci-wrapper-${sociWrapperVersion}-linux-amd64.tar.gz`;
        const handler = new aws_lambda_1.SingletonFunction(this, 'CustomResourceHandler', {
            // Use raw string to avoid from tightening CDK version requirement
            runtime: new aws_lambda_1.Runtime('nodejs18.x', aws_lambda_1.RuntimeFamily.NODEJS),
            code: aws_lambda_1.Code.fromAsset((0, path_1.join)(__dirname, '../lambda/trigger-codebuild/dist')),
            handler: 'index.handler',
            uuid: 'db740fd5-5436-4a84-8a09-e6dfcd01f4f3', // generated for this construct
            lambdaPurpose: 'DeployTimeBuildCustomResourceHandler',
            timeout: aws_cdk_lib_1.Duration.minutes(5),
        });
        const project = new singleton_project_1.SingletonProject(this, 'Project', {
            uuid: '024cf76a-1003-4aa4-aa4b-12c32c09ca3c', // generated for this construct
            projectPurpose: 'SociIndexBuild',
            environment: { buildImage: aws_codebuild_1.LinuxBuildImage.fromCodeBuildImageId('aws/codebuild/standard:7.0') },
            buildSpec: aws_codebuild_1.BuildSpec.fromObject({
                version: '0.2',
                phases: {
                    build: {
                        commands: [
                            'current_dir=$(pwd)',
                            `wget --quiet -O soci-wrapper.tar.gz ${binaryUrl}`,
                            'tar -xvzf soci-wrapper.tar.gz',
                            '',
                            'export AWS_ACCOUNT=$(aws sts get-caller-identity --query "Account" --output text)',
                            'export REGISTRY_USER=AWS',
                            'export REGISTRY_PASSWORD=$(aws ecr get-login-password --region $AWS_REGION)',
                            'export REGISTRY=$AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com',
                            'aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $REGISTRY',
                            'REPO_NAME=$repositoryName',
                            'IMAGE_TAG=$imageTag',
                            'DIGEST=$(aws ecr describe-images --repository-name $REPO_NAME --image-ids imageTag=$IMAGE_TAG --query imageDetails[0].imageDigest --output text)',
                            './soci-wrapper $REPO_NAME $DIGEST $AWS_REGION $AWS_ACCOUNT',
                        ],
                    },
                    post_build: {
                        commands: [
                            'echo Build completed on `date`',
                            `
STATUS='SUCCESS'
if [ $CODEBUILD_BUILD_SUCCEEDING -ne 1 ] # Test if the build is failing
then
STATUS='FAILED'
REASON="deploy-time-build failed. See CloudWatch Log stream for the detailed reason: 
https://$AWS_REGION.console.aws.amazon.com/cloudwatch/home?region=$AWS_REGION#logsV2:log-groups/log-group/\\$252Faws\\$252Fcodebuild\\$252F$projectName/log-events/$CODEBUILD_LOG_PATH"
fi
cat <<EOF > payload.json
{
  "StackId": "$stackId",
  "RequestId": "$requestId",
  "LogicalResourceId":"$logicalResourceId",
  "PhysicalResourceId": "$imageTag",
  "Status": "$STATUS",
  "Reason": "$REASON"
}
EOF
curl -vv -i -X PUT -H 'Content-Type:' -d "@payload.json" "$responseURL"
              `,
                        ],
                    },
                },
            }),
        }).project;
        handler.addToRolePolicy(new aws_iam_1.PolicyStatement({
            actions: ['codebuild:StartBuild'],
            resources: [project.projectArn],
        }));
        props.repository.grantPullPush(project);
        props.repository.grant(project, 'ecr:DescribeImages');
        const properties = {
            type: 'SociIndexBuild',
            imageTag: props.imageTag,
            repositoryName: props.repository.repositoryName,
            codeBuildProjectName: project.projectName,
        };
        new aws_cdk_lib_1.CustomResource(this, 'Resource', {
            serviceToken: handler.functionArn,
            resourceType: 'Custom::CDKSociIndexBuild',
            properties,
        });
    }
}
exports.SociIndexBuild = SociIndexBuild;
_a = JSII_RTTI_SYMBOL_1;
SociIndexBuild[_a] = { fqn: "deploy-time-build.SociIndexBuild", version: "0.3.24" };
//# sourceMappingURL=data:application/json;base64,