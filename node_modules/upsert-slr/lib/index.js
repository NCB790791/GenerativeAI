"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceLinkedRole = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const fs_1 = require("fs");
const path_1 = require("path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const constructs_1 = require("constructs");
class ServiceLinkedRole extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const handler = new aws_lambda_1.SingletonFunction(this, 'CustomResourceHandler', {
            // Use raw string to avoid from tightening CDK version requirement
            runtime: new aws_lambda_1.Runtime('nodejs20.x', aws_lambda_1.RuntimeFamily.NODEJS, { supportsInlineCode: true }),
            code: aws_lambda_1.Code.fromInline((0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../', 'lambda', 'dist', 'index.js')).toString()),
            handler: 'index.handler',
            uuid: '8f7be66a-3315-474b-aea1-6ceca43d27c3', // generated for this construct
            lambdaPurpose: 'UpsertSlrCustomResourceHandler',
            timeout: aws_cdk_lib_1.Duration.minutes(3),
            memorySize: 128,
        });
        handler.addToRolePolicy(new aws_iam_1.PolicyStatement({
            actions: ['iam:CreateServiceLinkedRole'],
            resources: ['*'],
        }));
        const properties = {
            awsServiceName: props.awsServiceName,
            description: props.description,
            waitTimeSeconds: aws_cdk_lib_1.Duration.minutes(1).toSeconds(),
        };
        new aws_cdk_lib_1.CustomResource(this, 'Default', {
            serviceToken: handler.functionArn,
            resourceType: 'Custom::UpsertServiceLinkedRole',
            properties,
        });
    }
}
exports.ServiceLinkedRole = ServiceLinkedRole;
_a = JSII_RTTI_SYMBOL_1;
ServiceLinkedRole[_a] = { fqn: "upsert-slr.ServiceLinkedRole", version: "1.0.6" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyQkFBa0M7QUFDbEMsK0JBQTRCO0FBQzVCLDZDQUF1RDtBQUN2RCxpREFBc0Q7QUFDdEQsdURBQXlGO0FBQ3pGLDJDQUF1QztBQXVCdkMsTUFBYSxpQkFBa0IsU0FBUSxzQkFBUztJQUM5QyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQTZCO1FBQ3JFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxPQUFPLEdBQUcsSUFBSSw4QkFBaUIsQ0FBQyxJQUFJLEVBQUUsdUJBQXVCLEVBQUU7WUFDbkUsa0VBQWtFO1lBQ2xFLE9BQU8sRUFBRSxJQUFJLG9CQUFPLENBQUMsWUFBWSxFQUFFLDBCQUFhLENBQUMsTUFBTSxFQUFFLEVBQUUsa0JBQWtCLEVBQUUsSUFBSSxFQUFFLENBQUM7WUFDdEYsSUFBSSxFQUFFLGlCQUFJLENBQUMsVUFBVSxDQUFDLElBQUEsaUJBQVksRUFBQyxJQUFBLFdBQUksRUFBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNwRyxPQUFPLEVBQUUsZUFBZTtZQUN4QixJQUFJLEVBQUUsc0NBQXNDLEVBQUUsK0JBQStCO1lBQzdFLGFBQWEsRUFBRSxnQ0FBZ0M7WUFDL0MsT0FBTyxFQUFFLHNCQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUM1QixVQUFVLEVBQUUsR0FBRztTQUNoQixDQUFDLENBQUM7UUFFSCxPQUFPLENBQUMsZUFBZSxDQUNyQixJQUFJLHlCQUFlLENBQUM7WUFDbEIsT0FBTyxFQUFFLENBQUMsNkJBQTZCLENBQUM7WUFDeEMsU0FBUyxFQUFFLENBQUMsR0FBRyxDQUFDO1NBQ2pCLENBQUMsQ0FDSCxDQUFDO1FBRUYsTUFBTSxVQUFVLEdBQXVCO1lBQ3JDLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYztZQUNwQyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsZUFBZSxFQUFFLHNCQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRTtTQUNqRCxDQUFDO1FBRUYsSUFBSSw0QkFBYyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUU7WUFDbEMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxXQUFXO1lBQ2pDLFlBQVksRUFBRSxpQ0FBaUM7WUFDL0MsVUFBVTtTQUNYLENBQUMsQ0FBQztJQUNMLENBQUM7O0FBakNILDhDQWtDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlYWRGaWxlU3luYyB9IGZyb20gJ2ZzJztcbmltcG9ydCB7IGpvaW4gfSBmcm9tICdwYXRoJztcbmltcG9ydCB7IEN1c3RvbVJlc291cmNlLCBEdXJhdGlvbiB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IFBvbGljeVN0YXRlbWVudCB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1pYW0nO1xuaW1wb3J0IHsgQ29kZSwgUnVudGltZSwgUnVudGltZUZhbWlseSwgU2luZ2xldG9uRnVuY3Rpb24gfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbGFtYmRhJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgUmVzb3VyY2VQcm9wZXJ0aWVzIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VydmljZUxpbmtlZFJvbGVQcm9wcyB7XG4gIC8qKlxuICAgKiBUaGUgc2VydmljZSBwcmluY2lwYWwgZm9yIHRoZSBBV1Mgc2VydmljZSB0byB3aGljaCB0aGlzIHJvbGUgaXMgYXR0YWNoZWQuXG4gICAqXG4gICAqIFlvdSB1c2UgYSBzdHJpbmcgc2ltaWxhciB0byBhIFVSTCBidXQgd2l0aG91dCB0aGUgaHR0cDovLyBpbiBmcm9udC4gRm9yIGV4YW1wbGU6IGVsYXN0aWNiZWFuc3RhbGsuYW1hem9uYXdzLmNvbSAuXG4gICAqXG4gICAqIFNlcnZpY2UgcHJpbmNpcGFscyBhcmUgdW5pcXVlIGFuZCBjYXNlLXNlbnNpdGl2ZS4gVG8gZmluZCB0aGUgZXhhY3Qgc2VydmljZSBwcmluY2lwYWwgZm9yIHlvdXIgc2VydmljZS1saW5rZWQgcm9sZSwgc2VlIEFXUyBzZXJ2aWNlcyB0aGF0IHdvcmsgd2l0aCBJQU0gaW4gdGhlIElBTSBVc2VyIEd1aWRlLiBMb29rIGZvciB0aGUgc2VydmljZXMgdGhhdCBoYXZlIFllcyBpbiB0aGUgU2VydmljZS1MaW5rZWQgUm9sZSBjb2x1bW4uIENob29zZSB0aGUgWWVzIGxpbmsgdG8gdmlldyB0aGUgc2VydmljZS1saW5rZWQgcm9sZSBkb2N1bWVudGF0aW9uIGZvciB0aGF0IHNlcnZpY2UuXG4gICAqIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9JQU0vbGF0ZXN0L1VzZXJHdWlkZS91c2luZy1zZXJ2aWNlLWxpbmtlZC1yb2xlcy5odG1sXG4gICAqL1xuICByZWFkb25seSBhd3NTZXJ2aWNlTmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIHJvbGUuIFRoaXMgaXMgb25seSB1c2VkIHdoZW4gY3JlYXRpbmcgYSBuZXcgcm9sZS5cbiAgICogV2hlbiB0aGVyZSBpcyBhbiBleGlzdGluZyByb2xlIGZvciB0aGUgYXdzIHNlcnZpY2UsIHRoaXMgZmllbGQgaXMgaWdub3JlZC5cbiAgICpcbiAgICogQGRlZmF1bHQgbm8gZGVzY3JpcHRpb25cbiAgICovXG4gIHJlYWRvbmx5IGRlc2NyaXB0aW9uPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgU2VydmljZUxpbmtlZFJvbGUgZXh0ZW5kcyBDb25zdHJ1Y3Qge1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogU2VydmljZUxpbmtlZFJvbGVQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICBjb25zdCBoYW5kbGVyID0gbmV3IFNpbmdsZXRvbkZ1bmN0aW9uKHRoaXMsICdDdXN0b21SZXNvdXJjZUhhbmRsZXInLCB7XG4gICAgICAvLyBVc2UgcmF3IHN0cmluZyB0byBhdm9pZCBmcm9tIHRpZ2h0ZW5pbmcgQ0RLIHZlcnNpb24gcmVxdWlyZW1lbnRcbiAgICAgIHJ1bnRpbWU6IG5ldyBSdW50aW1lKCdub2RlanMyMC54JywgUnVudGltZUZhbWlseS5OT0RFSlMsIHsgc3VwcG9ydHNJbmxpbmVDb2RlOiB0cnVlIH0pLFxuICAgICAgY29kZTogQ29kZS5mcm9tSW5saW5lKHJlYWRGaWxlU3luYyhqb2luKF9fZGlybmFtZSwgJy4uLycsICdsYW1iZGEnLCAnZGlzdCcsICdpbmRleC5qcycpKS50b1N0cmluZygpKSxcbiAgICAgIGhhbmRsZXI6ICdpbmRleC5oYW5kbGVyJyxcbiAgICAgIHV1aWQ6ICc4ZjdiZTY2YS0zMzE1LTQ3NGItYWVhMS02Y2VjYTQzZDI3YzMnLCAvLyBnZW5lcmF0ZWQgZm9yIHRoaXMgY29uc3RydWN0XG4gICAgICBsYW1iZGFQdXJwb3NlOiAnVXBzZXJ0U2xyQ3VzdG9tUmVzb3VyY2VIYW5kbGVyJyxcbiAgICAgIHRpbWVvdXQ6IER1cmF0aW9uLm1pbnV0ZXMoMyksXG4gICAgICBtZW1vcnlTaXplOiAxMjgsXG4gICAgfSk7XG5cbiAgICBoYW5kbGVyLmFkZFRvUm9sZVBvbGljeShcbiAgICAgIG5ldyBQb2xpY3lTdGF0ZW1lbnQoe1xuICAgICAgICBhY3Rpb25zOiBbJ2lhbTpDcmVhdGVTZXJ2aWNlTGlua2VkUm9sZSddLFxuICAgICAgICByZXNvdXJjZXM6IFsnKiddLFxuICAgICAgfSksXG4gICAgKTtcblxuICAgIGNvbnN0IHByb3BlcnRpZXM6IFJlc291cmNlUHJvcGVydGllcyA9IHtcbiAgICAgIGF3c1NlcnZpY2VOYW1lOiBwcm9wcy5hd3NTZXJ2aWNlTmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy5kZXNjcmlwdGlvbixcbiAgICAgIHdhaXRUaW1lU2Vjb25kczogRHVyYXRpb24ubWludXRlcygxKS50b1NlY29uZHMoKSxcbiAgICB9O1xuXG4gICAgbmV3IEN1c3RvbVJlc291cmNlKHRoaXMsICdEZWZhdWx0Jywge1xuICAgICAgc2VydmljZVRva2VuOiBoYW5kbGVyLmZ1bmN0aW9uQXJuLFxuICAgICAgcmVzb3VyY2VUeXBlOiAnQ3VzdG9tOjpVcHNlcnRTZXJ2aWNlTGlua2VkUm9sZScsXG4gICAgICBwcm9wZXJ0aWVzLFxuICAgIH0pO1xuICB9XG59XG4iXX0=